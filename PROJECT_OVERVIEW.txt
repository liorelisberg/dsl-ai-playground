================================================================================
                           DSL AI PLAYGROUND - PROJECT OVERVIEW
================================================================================

üéØ PROJECT OVERVIEW
================================================================================

This is a Domain-Specific Language (DSL) Tutor and Playground - an educational 
web application designed to help users learn and experiment with a JavaScript-like 
domain-specific language for data parsing and transformation.

üèóÔ∏è ARCHITECTURE & STRUCTURE
================================================================================

MONOREPO STRUCTURE:
‚îú‚îÄ‚îÄ apps/
‚îÇ   ‚îú‚îÄ‚îÄ web/           # React frontend application
‚îÇ   ‚îî‚îÄ‚îÄ server/        # Express.js backend server
‚îú‚îÄ‚îÄ packages/
‚îÇ   ‚îú‚îÄ‚îÄ ui/            # Shared UI components
‚îÇ   ‚îú‚îÄ‚îÄ config/        # Shared configuration
‚îÇ   ‚îî‚îÄ‚îÄ scripts/       # Build and utility scripts
‚îú‚îÄ‚îÄ src/               # Main application source
‚îú‚îÄ‚îÄ data/              # Data files (examples, rules)
‚îî‚îÄ‚îÄ public/            # Static assets

BUILD SYSTEM:
- Turborepo for monorepo orchestration
- Multiple package managers supported (pnpm, npm, bun)
- Vite for fast development and building
- TypeScript for type safety

üõ†Ô∏è TECHNOLOGY STACK
================================================================================

FRONTEND TECHNOLOGIES:
- Framework: React 18.3.1 with TypeScript
- Build Tool: Vite 5.4.1 with SWC plugin
- Styling: Tailwind CSS 3.4.11 with custom design system
- UI Components: shadcn/ui (comprehensive component library)
- State Management: React Query (TanStack Query) for server state
- Routing: React Router DOM 6.26.2
- Form Handling: React Hook Form with Zod validation
- Icons: Lucide React
- Notifications: Sonner toasts
- Theme: next-themes for dark/light mode

BACKEND TECHNOLOGIES:
- Runtime: Node.js with Express 5.1.0
- Language: TypeScript
- Database: ChromaDB integration (vector database)
- Middleware: CORS, cookie-parser, rate limiting
- Session Management: Custom session handling

üöÄ CORE FEATURES & CAPABILITIES
================================================================================

1. INTERACTIVE DSL LEARNING ENVIRONMENT
   - Split-panel interface: Chat assistant on left, code editor on right
   - Real-time expression evaluation with immediate feedback
   - Syntax highlighting and error handling
   - Modern, responsive UI with gradient branding

2. AI-POWERED CHAT ASSISTANT
   - Educational chatbot for learning DSL syntax and concepts
   - Context-aware responses with examples and debugging help
   - Chat history management (maintains last 8 messages)
   - Mock implementation (Gemini API integration pending)

3. CODE EDITOR & EXECUTION ENGINE
   - Expression workbench for writing and testing DSL expressions
   - JSON input support for testing expressions against sample data
   - Result visualization with formatted display
   - Basic DSL interpreter supporting:
     * Property access (user.name, user.profile.city)
     * String methods (.toUpperCase(), .toLowerCase(), .trim())
     * Nested object navigation

4. EXAMPLES LIBRARY
   - Categorized examples: basic operations, string transformations
   - Interactive examples drawer with search functionality
   - Pre-built examples for common use cases
   - Easy example selection and loading

5. MODERN UI/UX DESIGN
   - Dark/light mode support with theme switching
   - Responsive design for desktop and mobile
   - Professional indigo-to-emerald gradient color scheme
   - Smooth animations using Tailwind CSS
   - Comprehensive component library (50+ UI components)

üîß ADVANCED DSL CAPABILITIES (ZEN ENGINE POWERED)
================================================================================

PRODUCTION-GRADE EXPRESSION ENGINE:
- Engine: GoRules Zen Engine (Rust-powered, sub-millisecond evaluation)
- Architecture: Frontend HTTP client ‚Üí Backend API ‚Üí Zen Engine service
- Performance: 30-330¬µs evaluation times
- Standards: JSON Decision Model (JDM) format
- Reliability: Graceful fallback to basic evaluation when API unavailable

SUPPORTED OPERATIONS:

// Property access & nested navigation
user.name
user.profile.city
user.profile.address.street

// Mathematical operations
price * quantity                    // ‚Üí 31.5
total / count
amount + tax
price * (1 + taxRate)
age >= 18                          // ‚Üí true/false
score > threshold

// Array operations & indexing
users[0].name                      // ‚Üí "John"
users[0].email
items[1].price
products.length                    // Array length (syntax research needed)

// String operations
user.name.toUpperCase()            // ‚Üí "JOHN DOE"
user.email.toLowerCase()           // ‚Üí "john@example.com"
user.description.trim()            // ‚Üí "Clean text"
firstName + " " + lastName         // ‚Üí "John Doe"

// Conditional expressions
age >= 18 ? "Adult" : "Minor"     // Ternary operators
status == "active"                // Equality checks
!isExpired                        // Boolean negation

// Advanced comparisons & ranges
value > 100 && value < 1000       // Logical AND
status == "active" || status == "pending"  // Logical OR
[20..39]                          // Range operations
<20, >39                          // Multiple conditions

ENTERPRISE FEATURES:
- Native binary performance (Rust engine)
- Production-tested reliability (8,903+ weekly downloads)
- Built-in libraries: dayjs (dates), big.js (precision arithmetic)
- Timeout protection: 50ms execution limit
- Memory efficient: 31.2 kB engine size
- Cross-platform: NodeJS, Python, Go, Rust support

EXAMPLE USE CASES:
- Complex data transformations: price * (1 + taxRate) * quantity
- Business rules evaluation: age >= 18 && income > 50000
- Array data processing: users[0].profile.permissions[2]
- Financial calculations: (principal * rate * time) / 100
- String templating: firstName + " " + lastName + " (" + role + ")"
- Conditional logic: score >= 90 ? "A" : score >= 80 ? "B" : "C"

üìÅ COMPONENT ARCHITECTURE
================================================================================

MAIN COMPONENTS:
1. DSLTutor.tsx - Main application container with split layout
2. ChatPanel.tsx - AI assistant interface with message history  
3. CodeEditor.tsx - Expression editor with execution capabilities
4. ExamplesDrawer.tsx - Sliding panel with example library

SERVICES LAYER:
1. chatService.ts - Real Gemini 2.5 Flash Preview API integration
2. dslService.ts - Frontend HTTP client for DSL evaluation
3. examplesService.ts - Enhanced examples with Zen Engine capabilities

BACKEND SERVICES:
1. apps/server/src/services/dslService.ts - Zen Engine integration service
2. apps/server/src/services/gemini.ts - AI chat service
3. apps/server/src/api/chat.ts - Chat API endpoints
4. apps/server/src/index.ts - DSL evaluation API endpoint

API ENDPOINTS:
- POST /api/evaluate-dsl - Zen Engine expression evaluation
- POST /api/chat - AI assistant chat
- GET /api/health - Service health check

UI COMPONENTS (50+ shadcn/ui components):
- Form components: Button, Input, Textarea, Select, Checkbox
- Layout components: Card, Sheet, Dialog, Drawer, Tabs
- Navigation: Menubar, Navigation Menu, Breadcrumb
- Data display: Table, Chart, Badge, Avatar, Progress
- Feedback: Toast, Alert, Skeleton, Tooltip
- And many more...

üõ†Ô∏è DEVELOPMENT & BUILD SETUP
================================================================================

AVAILABLE SCRIPTS:
- pnpm run dev:full: Start both frontend and backend simultaneously
- pnpm run dev:client: Frontend only (port 8080)
- pnpm run dev:server: Backend only (port 3000) 
- pnpm run build: Production build
- pnpm run build:server: Backend production build
- pnpm run lint: Code linting with ESLint
- pnpm run preview: Preview production build

DEVELOPMENT TOOLS:
- Hot reload with Vite development server
- TypeScript strict configuration with path mapping
- ESLint with React hooks and refresh plugins
- Concurrently for multi-service development
- Rate limiting for API ion (10/min, 500/day)

üîÆ FUTURE ENHANCEMENTS (REMAINING TODOS)
================================================================================

1. ADVANCED DSL FEATURES
   - Array methods (.map(), .filter(), .find()) - syntax research from CSV examples
   - Date/time functions (using built-in dayjs library)
   - Custom JavaScript functions (Zen Engine supports this)
   - Advanced string manipulation methods

2. ENHANCED EXAMPLES LIBRARY
   - Extract examples from Zen Engine CSV test files (hundreds of real-world cases)
   - Interactive tutorials with step-by-step guidance
   - Complex transformation patterns and business rules
   - Real-world data processing scenarios

3. DATA PERSISTENCE
   - Save user expressions and history
   - User accounts and authentication
   - Cloud synchronization
   - Expression sharing and collaboration

4. PERFORMANCE & SCALABILITY
   - Expression result caching
   - Optimized bundle sizes with code splitting
   - CDN deployment for global performance
   - Load balancing for high-traffic scenarios

üìä PROJECT STATUS
================================================================================

COMPLETED:
‚úÖ Frontend: Fully functional with modern React architecture
‚úÖ Backend: Production Express server with comprehensive middleware
‚úÖ DSL Engine: Enterprise-grade Zen Engine integration (Rust-powered)
‚úÖ AI Integration: Real Gemini 2.5 Flash Preview API with rate limiting
‚úÖ UI/UX: Polished interface with dark/light themes and file uploads
‚úÖ Component Library: Comprehensive shadcn/ui integration (50+ components)
‚úÖ Build System: Turborepo monorepo with optimized Vite configuration
‚úÖ Development Workflow: Combined frontend/backend development scripts
‚úÖ API Architecture: RESTful endpoints with proper error handling
‚úÖ Advanced Expressions: Math (price * quantity), Arrays (users[0].name), Conditions (age >= 18)

RECENTLY COMPLETED:
‚úÖ Zen Engine Integration: Production-grade expression evaluation
‚úÖ Mathematical Operations: Full arithmetic and comparison support  
‚úÖ Array Indexing: Direct element access (users[0].name)
‚úÖ API-based Architecture: Frontend ‚Üí Backend ‚Üí Zen Engine pattern
‚úÖ Performance Optimization: Sub-millisecond evaluation times
‚úÖ Error Handling: Graceful fallback and comprehensive logging

IN PROGRESS:
üîÑ Advanced Examples: Extracting from Zen Engine CSV test files
üîÑ Array Methods: Research syntax for .map(), .filter(), .find()

PLANNED:
üìã Data Persistence: User accounts and expression history
üìã Enhanced Examples: CSV-based examples library extraction
üìã Advanced Tutorials: Interactive learning paths
üìã Performance Monitoring: Expression evaluation analytics

üöÄ DEPLOYMENT & HOSTING
================================================================================

CURRENT SETUP:
- Development: Frontend (8080) + Backend (3000) with hot reload
- Zen Engine: Native ARM64 binary for optimal macOS performance
- API Rate Limiting: 10 requests/minute, 500/day (free tier protection)
- Environment: Configured for both development and production

DEPLOYMENT OPTIONS:
- Frontend: Vercel/Netlify for static hosting
- Backend: Railway/Heroku/DigitalOcean for Node.js + native binaries
- Full-Stack: Docker containerization with multi-stage builds
- CDN: CloudFlare for global performance optimization

ARCHITECTURE BENEFITS:
- Scalable: Backend can handle multiple frontend instances
- Performant: Rust-powered expression evaluation
- Reliable: Enterprise-grade engine with fallback mechanisms
- Maintainable: Clean separation of concerns
- Extensible: Easy to add new expression capabilities

This project now represents a production-ready educational platform for learning 
domain-specific languages, powered by enterprise-grade expression evaluation 
technology and real AI assistance.

================================================================================
Generated: 2024-12-20
Project: DSL AI Playground  
Version: 1.0.0 (Zen Engine Integration Complete)
================================================================================ 