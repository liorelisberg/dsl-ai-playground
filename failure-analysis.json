{
  "summary": {
    "totalFailures": 74,
    "byCategory": {
      "array-operations": 3,
      "complex-array": 1,
      "extreme-data": 1,
      "complex-business": 1,
      "extreme-sports-betting": 1,
      "date-operations": 25,
      "complex-date": 1,
      "extreme-events": 1,
      "mathematical-operations": 16,
      "string-operations": 7,
      "complex-template": 2,
      "template": 3,
      "unary-operations": 7,
      "utility-functions": 5
    },
    "byPattern": {
      "dateFormat": 39,
      "floatingPoint": 9,
      "stringEscape": 1,
      "objectFormat": 0,
      "arrayFormat": 0,
      "templateFormat": 3,
      "rangeFormat": 19,
      "typeCoercion": 0,
      "other": 3
    },
    "criticalIssues": 3,
    "generatedAt": "2025-05-31T11:35:24.641Z"
  },
  "details": {
    "byCategory": {
      "array-operations": [
        {
          "file": "arrayOperationsExamples.ts",
          "id": "array-adv-6",
          "title": "String Array Transformation",
          "expression": "map(['a', 'b', 'c'], # + '!')",
          "sampleInput": "{}",
          "expectedOutput": "['a!', 'b!', 'c!']",
          "expectedParsed": "['a!', 'b!', 'c!']",
          "actualResult": [
            "a!",
            "b!",
            "c!"
          ],
          "category": "array-operations"
        },
        {
          "file": "arrayOperationsExamples.ts",
          "id": "array-adv-7",
          "title": "String Array Filter",
          "expression": "filter(['a', 'b', 'c', 'd'], # in ['a', 'c'])",
          "sampleInput": "{}",
          "expectedOutput": "['a', 'c']",
          "expectedParsed": "['a', 'c']",
          "actualResult": [
            "a",
            "c"
          ],
          "category": "array-operations"
        },
        {
          "file": "arrayOperationsExamples.ts",
          "id": "array-adv-18",
          "title": "Object Array Filter",
          "expression": "filter([{id: 1, name: \"John\"}, {id: 2, name: \"Jane\"}], #.id > 1)",
          "sampleInput": "{}",
          "expectedOutput": "[{id: 2, name: \"Jane\"}]",
          "expectedParsed": "[{id: 2, name: \"Jane\"}]",
          "actualResult": [
            {
              "id": 2,
              "name": "Jane"
            }
          ],
          "category": "array-operations"
        }
      ],
      "complex-array": [
        {
          "file": "arrayOperationsExamples.ts",
          "id": "complex-array-2",
          "title": "Data Pivot and Aggregation",
          "expression": "map(keys(map(sales, #.region)), {region: #, total_sales: sum(map(filter(sales, #.region == #), #.amount)), count: count(sales, #.region == #)})",
          "sampleInput": "{\"sales\": [{\"region\": \"North\", \"amount\": 100}, {\"region\": \"South\", \"amount\": 150}, {\"region\": \"North\", \"amount\": 200}, {\"region\": \"East\", \"amount\": 75}]}",
          "expectedOutput": "[{\"region\": \"North\", \"total_sales\": 300, \"count\": 2}, {\"region\": \"South\", \"total_sales\": 150, \"count\": 1}, {\"region\": \"East\", \"total_sales\": 75, \"count\": 1}]",
          "expectedParsed": [
            {
              "region": "North",
              "total_sales": 300,
              "count": 2
            },
            {
              "region": "South",
              "total_sales": 150,
              "count": 1
            },
            {
              "region": "East",
              "total_sales": 75,
              "count": 1
            }
          ],
          "actualResult": [
            {
              "count": 0,
              "region": 0,
              "total_sales": 0
            },
            {
              "count": 0,
              "region": 1,
              "total_sales": 0
            },
            {
              "count": 0,
              "region": 2,
              "total_sales": 0
            },
            {
              "count": 0,
              "region": 3,
              "total_sales": 0
            }
          ],
          "category": "complex-array"
        }
      ],
      "extreme-data": [
        {
          "file": "arrayOperationsExamples.ts",
          "id": "extreme-data-1",
          "title": "Nested E-commerce Order Processing Pipeline",
          "expression": "map(orders, {order_id: #.id, customer: {id: #.customer.id, tier: #.customer.orders_count > 50 ? 'VIP' : #.customer.orders_count > 20 ? 'Premium' : 'Standard', discount_eligible: #.customer.tier == 'VIP' or sum(map(#.items, #.price * #.quantity)) > 500}, items: map(#.items, {sku: #.sku, name: #.name, quantity: #.quantity, unit_price: #.price, line_total: #.price * #.quantity, category: #.category, tax_rate: #.category == 'electronics' ? 0.08 : #.category == 'clothing' ? 0.06 : 0.05}), totals: {subtotal: sum(map(#.items, #.price * #.quantity)), tax: sum(map(#.items, #.price * #.quantity * (#.category == 'electronics' ? 0.08 : #.category == 'clothing' ? 0.06 : 0.05))), shipping: sum(map(#.items, #.price * #.quantity)) > 100 ? 0 : 15, discount: (#.customer.orders_count > 50 ? 0.15 : #.customer.orders_count > 20 ? 0.10 : 0) * sum(map(#.items, #.price * #.quantity))}, processing: {estimated_ship: d().add(contains(#.shipping_method, 'express') ? 1 : 3, 'day').format('%Y-%m-%d'), warehouse: #.items[0].category == 'electronics' ? 'Tech Hub' : 'Main Warehouse'}})",
          "sampleInput": "{\"orders\": [{\"id\": \"ORD001\", \"customer\": {\"id\": \"CUST001\", \"orders_count\": 35, \"tier\": \"Premium\"}, \"items\": [{\"sku\": \"SKU001\", \"name\": \"iPhone 15\", \"quantity\": 1, \"price\": 999, \"category\": \"electronics\"}, {\"sku\": \"SKU002\", \"name\": \"Leather Case\", \"quantity\": 1, \"price\": 59, \"category\": \"accessories\"}], \"shipping_method\": \"express\"}]}",
          "expectedOutput": "[{\"order_id\": \"ORD001\", \"customer\": {\"id\": \"CUST001\", \"tier\": \"Premium\", \"discount_eligible\": true}, \"items\": [{\"sku\": \"SKU001\", \"name\": \"iPhone 15\", \"quantity\": 1, \"unit_price\": 999, \"line_total\": 999, \"category\": \"electronics\", \"tax_rate\": 0.08}, {\"sku\": \"SKU002\", \"name\": \"Leather Case\", \"quantity\": 1, \"unit_price\": 59, \"line_total\": 59, \"category\": \"accessories\", \"tax_rate\": 0.05}], \"totals\": {\"subtotal\": 1058, \"tax\": 82.87, \"shipping\": 0, \"discount\": 105.8}, \"processing\": {\"estimated_ship\": \"2024-02-01\", \"warehouse\": \"Tech Hub\"}}]",
          "expectedParsed": [
            {
              "order_id": "ORD001",
              "customer": {
                "id": "CUST001",
                "tier": "Premium",
                "discount_eligible": true
              },
              "items": [
                {
                  "sku": "SKU001",
                  "name": "iPhone 15",
                  "quantity": 1,
                  "unit_price": 999,
                  "line_total": 999,
                  "category": "electronics",
                  "tax_rate": 0.08
                },
                {
                  "sku": "SKU002",
                  "name": "Leather Case",
                  "quantity": 1,
                  "unit_price": 59,
                  "line_total": 59,
                  "category": "accessories",
                  "tax_rate": 0.05
                }
              ],
              "totals": {
                "subtotal": 1058,
                "tax": 82.87,
                "shipping": 0,
                "discount": 105.8
              },
              "processing": {
                "estimated_ship": "2024-02-01",
                "warehouse": "Tech Hub"
              }
            }
          ],
          "actualResult": [
            {
              "customer": {
                "discount_eligible": true,
                "id": "CUST001",
                "tier": "Premium"
              },
              "items": [
                {
                  "category": "electronics",
                  "line_total": 999,
                  "name": "iPhone 15",
                  "quantity": 1,
                  "sku": "SKU001",
                  "tax_rate": 0.08,
                  "unit_price": 999
                },
                {
                  "category": "accessories",
                  "line_total": 59,
                  "name": "Leather Case",
                  "quantity": 1,
                  "sku": "SKU002",
                  "tax_rate": 0.05,
                  "unit_price": 59
                }
              ],
              "order_id": "ORD001",
              "processing": {
                "estimated_ship": "2025-06-01",
                "warehouse": "Tech Hub"
              },
              "totals": {
                "discount": 105.8,
                "shipping": 0,
                "subtotal": 1058,
                "tax": 82.87
              }
            }
          ],
          "category": "extreme-data"
        }
      ],
      "complex-business": [
        {
          "file": "business_calculationsExamples.ts",
          "id": "complex-business-2",
          "title": "Employee Performance Score",
          "expression": "map(employees, {name: #.name, score: round(avg([#.sales, #.reviews, #.attendance]) * 100), grade: avg([#.sales, #.reviews, #.attendance]) >= 0.8 ? 'A' : avg([#.sales, #.reviews, #.attendance]) >= 0.6 ? 'B' : 'C'})",
          "sampleInput": "{\"employees\": [{\"name\": \"Alice\", \"sales\": 0.9, \"reviews\": 0.8, \"attendance\": 0.95}, {\"name\": \"Bob\", \"sales\": 0.6, \"reviews\": 0.7, \"attendance\": 0.5}]}",
          "expectedOutput": "[{\"name\": \"Alice\", \"score\": 88, \"grade\": \"A\"}, {\"name\": \"Bob\", \"score\": 60, \"grade\": \"C\"}]",
          "expectedParsed": [
            {
              "name": "Alice",
              "score": 88,
              "grade": "A"
            },
            {
              "name": "Bob",
              "score": 60,
              "grade": "C"
            }
          ],
          "actualResult": [
            {
              "grade": "A",
              "name": "Alice",
              "score": 88
            },
            {
              "grade": "B",
              "name": "Bob",
              "score": 60
            }
          ],
          "category": "complex-business"
        }
      ],
      "extreme-sports-betting": [
        {
          "file": "complexExamples.ts",
          "id": "extreme-betting-2",
          "title": "Multi-Leg Parlay Calculator",
          "expression": "map(parlays, {id: #.id, legs: len(#.selections), total_odds: round(#.selections[0].odds * #.selections[1].odds * #.selections[2].odds * 100) / 100, potential_payout: round(#.stake * #.selections[0].odds * #.selections[1].odds * #.selections[2].odds * 100) / 100, probability: round(100 / (#.selections[0].odds * #.selections[1].odds * #.selections[2].odds)), risk_rating: #.selections[0].odds * #.selections[1].odds * #.selections[2].odds > 10 ? 'High' : #.selections[0].odds * #.selections[1].odds * #.selections[2].odds > 5 ? 'Medium' : 'Low'})",
          "sampleInput": "{\"parlays\": [{\"id\": \"P001\", \"stake\": 100, \"selections\": [{\"match\": \"Lakers vs Warriors\", \"bet\": \"Lakers +5.5\", \"odds\": 1.91}, {\"match\": \"Patriots vs Chiefs\", \"bet\": \"Over 48.5\", \"odds\": 1.85}, {\"match\": \"Arsenal vs Chelsea\", \"bet\": \"Arsenal Win\", \"odds\": 2.10}]}]}",
          "expectedOutput": "[{\"id\": \"P001\", \"legs\": 3, \"total_odds\": 7.42, \"potential_payout\": 742.16, \"probability\": 13, \"risk_rating\": \"High\"}]",
          "expectedParsed": [
            {
              "id": "P001",
              "legs": 3,
              "total_odds": 7.42,
              "potential_payout": 742.16,
              "probability": 13,
              "risk_rating": "High"
            }
          ],
          "actualResult": [
            {
              "id": "P001",
              "legs": 3,
              "potential_payout": 742.04,
              "probability": 13,
              "risk_rating": "Medium",
              "total_odds": 7.42
            }
          ],
          "category": "extreme-sports-betting"
        }
      ],
      "date-operations": [
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-2",
          "title": "Date Creation",
          "expression": "date(\"2023-09-18\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-18T00:00:00Z",
          "expectedParsed": "2023-09-18T00:00:00Z",
          "actualResult": 1694995200,
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-3",
          "title": "Date with Time",
          "expression": "d(\"2023-09-18T15:30:00\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-18T15:30:00Z",
          "expectedParsed": "2023-09-18T15:30:00Z",
          "actualResult": "Invalid date",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-4",
          "title": "Date Addition",
          "expression": "d(\"2023-09-18\").add(5, \"day\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-23T00:00:00Z",
          "expectedParsed": "2023-09-23T00:00:00Z",
          "actualResult": "2023-09-23T00:00:00+03:00",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-5",
          "title": "Date Subtraction",
          "expression": "d(\"2023-09-18\").sub(3, \"d\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-15T00:00:00Z",
          "expectedParsed": "2023-09-15T00:00:00Z",
          "actualResult": "2023-09-15T00:00:00+03:00",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-7",
          "title": "Date Formatting",
          "expression": "d(\"2023-09-18\").format(\"YYYY-MM-DD\")",
          "sampleInput": "{}",
          "expectedOutput": "\"2023-09-18\"",
          "expectedParsed": "2023-09-18",
          "actualResult": "YYYY-MM-DD",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-12",
          "title": "Calculate Days Between",
          "expression": "d(date(\"2023-09-18\")).diff(date(\"2023-09-15\"), \"day\")",
          "sampleInput": "{}",
          "expectedOutput": "7",
          "expectedParsed": 7,
          "actualResult": 0,
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-13",
          "title": "Check Weekend",
          "expression": "dayOfWeek(date(\"2023-09-18\")) > 5",
          "sampleInput": "{}",
          "expectedOutput": "true",
          "expectedParsed": true,
          "actualResult": false,
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-14",
          "title": "Add Months",
          "expression": "d(\"2023-09-18\").add(2, \"month\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-11-18T00:00:00Z",
          "expectedParsed": "2023-11-18T00:00:00Z",
          "actualResult": "2023-11-18T00:00:00+02:00",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-const-1",
          "title": "Date from Components",
          "expression": "d(\"2023-09-18\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-18T00:00:00Z",
          "expectedParsed": "2023-09-18T00:00:00Z",
          "actualResult": "2023-09-18T00:00:00+03:00",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-const-2",
          "title": "Date with Time Components",
          "expression": "d(\"2023-09-18T15:30:00\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-18T15:30:00Z",
          "expectedParsed": "2023-09-18T15:30:00Z",
          "actualResult": "Invalid date",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-const-3",
          "title": "Date from Timestamp",
          "expression": "date(1695038400000)",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-18T14:00:00Z",
          "expectedParsed": "2023-09-18T14:00:00Z",
          "actualResult": 1695038400000,
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-const-4",
          "title": "Date from ISO String",
          "expression": "date(\"2023-09-18T15:30:00.000Z\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-18T15:30:00Z",
          "expectedParsed": "2023-09-18T15:30:00Z",
          "actualResult": 1695051000,
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-const-5",
          "title": "Get Today at Midnight",
          "expression": "d()",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-18T00:00:00Z",
          "expectedParsed": "2023-09-18T00:00:00Z",
          "actualResult": "2025-05-31T14:30:21+03:00",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-const-6",
          "title": "Get Tomorrow at Midnight",
          "expression": "d(\"2023-01-01\").add(1, \"day\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-19T00:00:00Z",
          "expectedParsed": "2023-09-19T00:00:00Z",
          "actualResult": "2023-01-02T00:00:00+02:00",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-const-7",
          "title": "Get Yesterday at Midnight",
          "expression": "d().sub(1, \"d\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-17T00:00:00Z",
          "expectedParsed": "2023-09-17T00:00:00Z",
          "actualResult": "2025-05-30T14:30:21+03:00",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-const-8",
          "title": "Get Start of Day for Given Date",
          "expression": "d(\"2023-01-01\").startOf(\"day\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-18T00:00:00Z",
          "expectedParsed": "2023-09-18T00:00:00Z",
          "actualResult": "2023-01-01T00:00:00+02:00",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-const-9",
          "title": "Get End of Day for Given Date",
          "expression": "d(\"2023-01-01\").endOf(\"day\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-18T23:59:59Z",
          "expectedParsed": "2023-09-18T23:59:59Z",
          "actualResult": "2023-01-01T23:59:59+02:00",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-const-10",
          "title": "Get First Day of Month",
          "expression": "d(\"2023-01-01\").startOf(\"month\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-01T00:00:00Z",
          "expectedParsed": "2023-09-01T00:00:00Z",
          "actualResult": "2023-01-01T00:00:00+02:00",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-const-11",
          "title": "Get Last Day of Month",
          "expression": "d(\"2023-01-01\").endOf(\"month\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-30T23:59:59Z",
          "expectedParsed": "2023-09-30T23:59:59Z",
          "actualResult": "2023-01-31T23:59:59+02:00",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-const-12",
          "title": "Date from Variable",
          "expression": "date(dateString)",
          "sampleInput": "{\"dateString\": \"2023-09-18\"}",
          "expectedOutput": "2023-09-18T00:00:00Z",
          "expectedParsed": "2023-09-18T00:00:00Z",
          "actualResult": 1694995200,
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-parts-1",
          "title": "Extract Hour",
          "expression": "d(\"2023-09-18T15:30:45\").hour()",
          "sampleInput": "{}",
          "expectedOutput": "15",
          "expectedParsed": 15,
          "actualResult": {},
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-parts-2",
          "title": "Extract Minute",
          "expression": "d(\"2023-09-18T15:30:45\").minute()",
          "sampleInput": "{}",
          "expectedOutput": "30",
          "expectedParsed": 30,
          "actualResult": {},
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-parts-3",
          "title": "Extract Second",
          "expression": "d(\"2023-09-18T15:30:45\").second()",
          "sampleInput": "{}",
          "expectedOutput": "45",
          "expectedParsed": 45,
          "actualResult": {},
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-parts-4",
          "title": "Get Timestamp",
          "expression": "d(\"2023-09-18T15:30:00\").timestamp()",
          "sampleInput": "{}",
          "expectedOutput": "1695043800000",
          "expectedParsed": 1695043800000,
          "actualResult": {},
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-parts-10",
          "title": "Calculate Age Between Two Dates",
          "expression": "d(date(\"2023-09-18\")).diff(date(\"2022-09-18\"), \"day\")",
          "sampleInput": "{}",
          "expectedOutput": "365",
          "expectedParsed": 365,
          "actualResult": 0,
          "category": "date-operations"
        }
      ],
      "complex-date": [
        {
          "file": "dateOperationsExamples.ts",
          "id": "complex-date-2",
          "title": "Business Days Calculation",
          "expression": "map(projects, {name: #.name, duration: d(#.endDate).diff(d(#.startDate), 'day'), workdays: count(map([0..d(#.endDate).diff(d(#.startDate), 'day')], d(#.startDate).add(#, 'day').weekday()), # != 6 and # != 7)})",
          "sampleInput": "{\"projects\": [{\"name\": \"Project A\", \"startDate\": \"2023-10-02\", \"endDate\": \"2023-10-06\"}]}",
          "expectedOutput": "[{\"name\": \"Project A\", \"duration\": 4, \"workdays\": 4}]",
          "expectedParsed": [
            {
              "name": "Project A",
              "duration": 4,
              "workdays": 4
            }
          ],
          "actualResult": [
            {
              "duration": 4,
              "name": "Project A",
              "workdays": 5
            }
          ],
          "category": "complex-date"
        }
      ],
      "extreme-events": [
        {
          "file": "dateOperationsExamples.ts",
          "id": "extreme-events-1",
          "title": "Complex Event Scheduling with Timezone Management",
          "expression": "map(events, {id: #.id, title: #.title, local_start: d(#.start_utc).tz(#.timezone).format('%Y-%m-%d %H:%M %Z'), duration_hours: d(#.end_utc).diff(d(#.start_utc), 'hour'), attendees: {registered: len(#.attendees), capacity: #.capacity, utilization: round(len(#.attendees) / #.capacity * 100)}, conflicts: count(filter(events, #.id != #.id and d(#.start_utc).isBefore(d(#.end_utc)) and d(#.end_utc).isAfter(d(#.start_utc))), true), status: len(#.attendees) >= #.capacity ? 'Full' : d(#.start_utc).isBefore(d()) ? 'Past' : 'Available'})",
          "sampleInput": "{\"events\": [{\"id\": \"E001\", \"title\": \"Tech Conference 2024\", \"start_utc\": \"2024-03-15T09:00:00Z\", \"end_utc\": \"2024-03-15T17:00:00Z\", \"timezone\": \"America/New_York\", \"capacity\": 500, \"attendees\": [{\"name\": \"John\"}, {\"name\": \"Jane\"}]}, {\"id\": \"E002\", \"title\": \"Workshop Session\", \"start_utc\": \"2024-03-15T14:00:00Z\", \"end_utc\": \"2024-03-15T16:00:00Z\", \"timezone\": \"America/New_York\", \"capacity\": 50, \"attendees\": []}]}",
          "expectedOutput": "[{\"id\": \"E001\", \"title\": \"Tech Conference 2024\", \"local_start\": \"2024-03-15 05:00 EST\", \"duration_hours\": 8, \"attendees\": {\"registered\": 2, \"capacity\": 500, \"utilization\": 0}, \"conflicts\": 1, \"status\": \"Available\"}, {\"id\": \"E002\", \"title\": \"Workshop Session\", \"local_start\": \"2024-03-15 10:00 EST\", \"duration_hours\": 2, \"attendees\": {\"registered\": 0, \"capacity\": 50, \"utilization\": 0}, \"conflicts\": 1, \"status\": \"Available\"}]",
          "expectedParsed": [
            {
              "id": "E001",
              "title": "Tech Conference 2024",
              "local_start": "2024-03-15 05:00 EST",
              "duration_hours": 8,
              "attendees": {
                "registered": 2,
                "capacity": 500,
                "utilization": 0
              },
              "conflicts": 1,
              "status": "Available"
            },
            {
              "id": "E002",
              "title": "Workshop Session",
              "local_start": "2024-03-15 10:00 EST",
              "duration_hours": 2,
              "attendees": {
                "registered": 0,
                "capacity": 50,
                "utilization": 0
              },
              "conflicts": 1,
              "status": "Available"
            }
          ],
          "actualResult": [
            {
              "attendees": {
                "capacity": 500,
                "registered": 2,
                "utilization": 0
              },
              "conflicts": 0,
              "duration_hours": 8,
              "id": "E001",
              "local_start": "2024-03-15 03:00 EDT",
              "status": "Past",
              "title": "Tech Conference 2024"
            },
            {
              "attendees": {
                "capacity": 50,
                "registered": 0,
                "utilization": 0
              },
              "conflicts": 0,
              "duration_hours": 2,
              "id": "E002",
              "local_start": "2024-03-15 08:00 EDT",
              "status": "Past",
              "title": "Workshop Session"
            }
          ],
          "category": "extreme-events"
        }
      ],
      "mathematical-operations": [
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "math-7",
          "title": "Square Root",
          "expression": "4 ^ 0.5",
          "sampleInput": "{}",
          "expectedOutput": "2",
          "expectedParsed": 2,
          "actualResult": 1.999999992473416,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "math-15",
          "title": "Fractional Power",
          "expression": "9 ^ 0.5",
          "sampleInput": "{}",
          "expectedOutput": "3",
          "expectedParsed": 3,
          "actualResult": 2.9999999929549435,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "math-23",
          "title": "Square Root of a Squared Number",
          "expression": "(5 ^ 2) ^ 0.5",
          "sampleInput": "{}",
          "expectedOutput": "5",
          "expectedParsed": 5,
          "actualResult": 4.999999989955171,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "complex-math-3",
          "title": "Combination of Square Root and Power Operations",
          "expression": "(16) ^ 0.5 * 2",
          "sampleInput": "{}",
          "expectedOutput": "8",
          "expectedParsed": 8,
          "actualResult": 7.999999975121966,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "complex-math-9",
          "title": "Nested Square Root Operations",
          "expression": "4 ^ 0.5",
          "sampleInput": "{}",
          "expectedOutput": "2",
          "expectedParsed": 2,
          "actualResult": 1.999999992473416,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "complex-math-10",
          "title": "Complex Modulo Chain",
          "expression": "((20 % 7) + 3) % 5",
          "sampleInput": "{}",
          "expectedOutput": "1",
          "expectedParsed": 1,
          "actualResult": 4,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "complex-math-13",
          "title": "Square Root of Sum",
          "expression": "(5 ^ 2 + 12 ^ 2) ^ 0.5",
          "sampleInput": "{}",
          "expectedOutput": "13",
          "expectedParsed": 13,
          "actualResult": 12.999999970526881,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "complex-math-14",
          "title": "Fractional Exponents",
          "expression": "8 ^ (1/3)",
          "sampleInput": "{}",
          "expectedOutput": "2",
          "expectedParsed": 2,
          "actualResult": 1.999999992473416,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "complex-math-22",
          "title": "Distance Formula",
          "expression": "((x2 - x1) ^ 0.5 ^ 2 + (y2 - y1) ^ 2)",
          "sampleInput": "{\"x1\": 0, \"y1\": 0, \"x2\": 3, \"y2\": 4}",
          "expectedOutput": "5",
          "expectedParsed": 5,
          "actualResult": 17.316074012124222,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "complex-math-26",
          "title": "Geometric Mean",
          "expression": "(a * b) ^ 0.5",
          "sampleInput": "{\"a\": 4, \"b\": 9}",
          "expectedOutput": "6",
          "expectedParsed": 6,
          "actualResult": 5.999999994581474,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "complex-math-31",
          "title": "Standard Deviation Calculation",
          "expression": "round((sum(map(numbers, (#- avg(numbers)) ^ 2)) / len(numbers)) ^ 0.5 * 100) / 100",
          "sampleInput": "{\"numbers\": [1, 2, 2, 3, 4, 4, 4, 5]}",
          "expectedOutput": "1.36",
          "expectedParsed": 1.36,
          "actualResult": 1.27,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "complex-math-32",
          "title": "Exponential Growth",
          "expression": "initial * e ^ (rate * time)",
          "sampleInput": "{\"initial\": 100, \"e\": 2.71828, \"rate\": 0.1, \"time\": 5}",
          "expectedOutput": "164.872",
          "expectedParsed": 164.872,
          "actualResult": 164.8720710527668,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "complex-math-33",
          "title": "Complex Nested Mathematical Expression",
          "expression": "((2 + 3) * (4 - 1)) + (6 / 2) + (16) ^ 0.5",
          "sampleInput": "{}",
          "expectedOutput": "20",
          "expectedParsed": 20,
          "actualResult": 21.999999987560983,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "decimal-1",
          "title": "Decimal Addition Precision",
          "expression": "0.1 + 0.2 == 0.3",
          "sampleInput": "{}",
          "expectedOutput": "false",
          "expectedParsed": false,
          "actualResult": true,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "decimal-7",
          "title": "Complex Expression with Decimal Precision Control",
          "expression": "round((0.1 + 0.2) * 3, 10)",
          "sampleInput": "{}",
          "expectedOutput": "0.45",
          "expectedParsed": 0.45,
          "actualResult": 0.9,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "round-9",
          "title": "Round to Tens",
          "expression": "round(1234)",
          "sampleInput": "{}",
          "expectedOutput": "1230",
          "expectedParsed": 1230,
          "actualResult": 1234,
          "category": "mathematical-operations"
        }
      ],
      "string-operations": [
        {
          "file": "stringOperationsExamples.ts",
          "id": "slice-1",
          "title": "Basic String Slice",
          "expression": "text[0:5]",
          "sampleInput": "{\"text\": \"hello world\"}",
          "expectedOutput": "\"hello\"",
          "expectedParsed": "hello",
          "actualResult": "hello ",
          "category": "string-operations"
        },
        {
          "file": "stringOperationsExamples.ts",
          "id": "slice-4",
          "title": "String Slice from Start",
          "expression": "text[:5]",
          "sampleInput": "{\"text\": \"hello world\"}",
          "expectedOutput": "\"hello\"",
          "expectedParsed": "hello",
          "actualResult": "hello ",
          "category": "string-operations"
        },
        {
          "file": "stringOperationsExamples.ts",
          "id": "slice-5",
          "title": "Variable String Slice",
          "expression": "text[start:end]",
          "sampleInput": "{\"text\": \"programming\", \"start\": 0, \"end\": 7}",
          "expectedOutput": "\"program\"",
          "expectedParsed": "program",
          "actualResult": "programm",
          "category": "string-operations"
        },
        {
          "file": "stringOperationsExamples.ts",
          "id": "slice-6",
          "title": "Single Character Access",
          "expression": "text[1:2]",
          "sampleInput": "{\"text\": \"hello\"}",
          "expectedOutput": "\"e\"",
          "expectedParsed": "e",
          "actualResult": "el",
          "category": "string-operations"
        },
        {
          "file": "stringOperationsExamples.ts",
          "id": "slice-7",
          "title": "Dynamic Slice with Length",
          "expression": "name[0:len(name)-1]",
          "sampleInput": "{\"name\": \"Alice\"}",
          "expectedOutput": "\"Alic\"",
          "expectedParsed": "Alic",
          "actualResult": "Alice",
          "category": "string-operations"
        },
        {
          "file": "stringOperationsExamples.ts",
          "id": "slice-8",
          "title": "Conditional String Slicing",
          "expression": "len(text) > 5 ? text[0:5] + \"...\" : text",
          "sampleInput": "{\"text\": \"This is a long string\"}",
          "expectedOutput": "\"This ...\"",
          "expectedParsed": "This ...",
          "actualResult": "This i...",
          "category": "string-operations"
        },
        {
          "file": "stringOperationsExamples.ts",
          "id": "template-2",
          "title": "Template with Expression",
          "expression": "`The length of \"${text}\" is ${len(text)} characters`",
          "sampleInput": "{\"text\": \"hello\"}",
          "expectedOutput": "\"The length of \\\"hello\\\" is 5 characters\"",
          "expectedParsed": "The length of \\\"hello\\\" is 5 characters",
          "actualResult": "The length of \"hello\" is 5 characters",
          "category": "string-operations"
        }
      ],
      "complex-template": [
        {
          "file": "stringOperationsExamples.ts",
          "id": "complex-template-1",
          "title": "Dynamic Report Generation",
          "expression": "`Report Summary:\nTotal Orders: ${len(orders)}\nRevenue: $${sum(map(orders, #.total))}\nTop Customer: ${map(orders, #.customer)[0]}\nGenerated: ${d().format(\"%Y-%m-%d %H:%M\")}`",
          "sampleInput": "{\"orders\": [{\"customer\": \"Alice\", \"total\": 250}, {\"customer\": \"Bob\", \"total\": 150}]}",
          "expectedOutput": "\"Report Summary:\\nTotal Orders: 2\\nRevenue: $400\\nTop Customer: Alice\\nGenerated: 2023-10-15 14:30\"",
          "expectedParsed": "Report Summary:\\nTotal Orders: 2\\nRevenue: $400\\nTop Customer: Alice\\nGenerated: 2023-10-15 14:30",
          "actualResult": "Report Summary:\nTotal Orders: 2\nRevenue: $400\nTop Customer: Alice\nGenerated: 2025-05-31 14:30",
          "category": "complex-template"
        },
        {
          "file": "stringOperationsExamples.ts",
          "id": "complex-template-2",
          "title": "User Notification Message",
          "expression": "\"Complex template result\"",
          "sampleInput": "{\"user\": {\"name\": \"John\", \"messages\": 3, \"lastLogin\": \"2023-10-01\"}}",
          "expectedOutput": "\"Hello John! You have 3 new messages. Last login: October 01, 2023\"",
          "expectedParsed": "Hello John! You have 3 new messages. Last login: October 01, 2023",
          "actualResult": "Complex template result",
          "category": "complex-template"
        }
      ],
      "template": [
        {
          "file": "templateExamples.ts",
          "id": "template-8",
          "title": "Unary Context Template",
          "expression": "`simple template`",
          "sampleInput": "{\"$\": \"simple template\"}",
          "expectedOutput": "true",
          "expectedParsed": true,
          "actualResult": "simple template",
          "category": "template"
        },
        {
          "file": "templateExamples.ts",
          "id": "template-9",
          "title": "Unary Sum Template",
          "expression": "`sum of numbers ${sum([1, 2, 3])}`",
          "sampleInput": "{\"$\": \"sum of numbers 6\"}",
          "expectedOutput": "true",
          "expectedParsed": true,
          "actualResult": "sum of numbers 6",
          "category": "template"
        },
        {
          "file": "templateExamples.ts",
          "id": "template-10",
          "title": "Unary Variable Template",
          "expression": "`reference env: ${a}`",
          "sampleInput": "{\"$\": \"reference env: example\", \"a\": \"example\"}",
          "expectedOutput": "true",
          "expectedParsed": true,
          "actualResult": "reference env: example",
          "category": "template"
        }
      ],
      "unary-operations": [
        {
          "file": "unary_operationsExamples.ts",
          "id": "unary-2",
          "title": "Boolean Context False",
          "expression": "true",
          "sampleInput": "{ \"$\": false }",
          "expectedOutput": "false",
          "expectedParsed": false,
          "actualResult": true,
          "category": "unary-operations"
        },
        {
          "file": "unary_operationsExamples.ts",
          "id": "unary-7",
          "title": "Range Check Inclusive",
          "expression": "[-10..0]",
          "sampleInput": "{\"$\": 0}",
          "expectedOutput": "true",
          "expectedParsed": true,
          "actualResult": "[-10..0]",
          "category": "unary-operations"
        },
        {
          "file": "unary_operationsExamples.ts",
          "id": "unary-8",
          "title": "Range Check Exclusive Start",
          "expression": "(-10..0]",
          "sampleInput": "{\"$\": -10}",
          "expectedOutput": "false",
          "expectedParsed": false,
          "actualResult": "(-10..0]",
          "category": "unary-operations"
        },
        {
          "file": "unary_operationsExamples.ts",
          "id": "unary-9",
          "title": "Range Check Exclusive End",
          "expression": "[-10..0)",
          "sampleInput": "{\"$\": -10}",
          "expectedOutput": "true",
          "expectedParsed": true,
          "actualResult": "[-10..0)",
          "category": "unary-operations"
        },
        {
          "file": "unary_operationsExamples.ts",
          "id": "unary-10",
          "title": "Range Check Both Exclusive",
          "expression": "(-10..0)",
          "sampleInput": "{\"$\": 0}",
          "expectedOutput": "false",
          "expectedParsed": false,
          "actualResult": "(-10..0)",
          "category": "unary-operations"
        },
        {
          "file": "unary_operationsExamples.ts",
          "id": "unary-11",
          "title": "Complex Range Check",
          "expression": "[-15..-5]",
          "sampleInput": "{\"$\": -4.99}",
          "expectedOutput": "false",
          "expectedParsed": false,
          "actualResult": "[-15..-5]",
          "category": "unary-operations"
        },
        {
          "file": "unary_operationsExamples.ts",
          "id": "unary-14",
          "title": "String Set Check",
          "expression": "[\"GB\", \"US\"]",
          "sampleInput": "{\"$\": \"US\"}",
          "expectedOutput": "true",
          "expectedParsed": true,
          "actualResult": [
            "GB",
            "US"
          ],
          "category": "unary-operations"
        }
      ],
      "utility-functions": [
        {
          "file": "utility_functionsExamples.ts",
          "id": "util-10",
          "title": "Date Set Year",
          "expression": "d(\"2023-10-15\").set(\"year\", 2024)",
          "sampleInput": "{}",
          "expectedOutput": "\"2024-10-15T00:00:00Z\"",
          "expectedParsed": "2024-10-15T00:00:00Z",
          "actualResult": "2024-10-15T00:00:00+03:00",
          "category": "utility-functions"
        },
        {
          "file": "utility_functionsExamples.ts",
          "id": "util-11",
          "title": "Date Set Month",
          "expression": "d(\"2023-10-15\").set(\"month\", 5)",
          "sampleInput": "{}",
          "expectedOutput": "\"2023-05-15T00:00:00Z\"",
          "expectedParsed": "2023-05-15T00:00:00Z",
          "actualResult": "2023-05-15T00:00:00+03:00",
          "category": "utility-functions"
        },
        {
          "file": "utility_functionsExamples.ts",
          "id": "util-12",
          "title": "Date Set Day",
          "expression": "d(\"2023-10-15\").set(\"day\", 20)",
          "sampleInput": "{}",
          "expectedOutput": "\"2023-10-20T00:00:00Z\"",
          "expectedParsed": "2023-10-20T00:00:00Z",
          "actualResult": "2023-10-20T00:00:00+03:00",
          "category": "utility-functions"
        },
        {
          "file": "utility_functionsExamples.ts",
          "id": "util-13",
          "title": "Date Set Hour",
          "expression": "d(\"2023-10-15T10:30:00Z\").set(\"hour\", 15)",
          "sampleInput": "{}",
          "expectedOutput": "\"2023-10-15T15:30:00Z\"",
          "expectedParsed": "2023-10-15T15:30:00Z",
          "actualResult": "2023-10-15T15:30:00+03:00",
          "category": "utility-functions"
        },
        {
          "file": "utility_functionsExamples.ts",
          "id": "util-14",
          "title": "Date Set Minute",
          "expression": "d(\"2023-10-15T10:30:00Z\").set(\"minute\", 45)",
          "sampleInput": "{}",
          "expectedOutput": "\"2023-10-15T10:45:00Z\"",
          "expectedParsed": "2023-10-15T10:45:00Z",
          "actualResult": "2023-10-15T10:45:00+03:00",
          "category": "utility-functions"
        }
      ]
    },
    "byPattern": {
      "dateFormat": [
        {
          "file": "arrayOperationsExamples.ts",
          "id": "extreme-data-1",
          "title": "Nested E-commerce Order Processing Pipeline",
          "expression": "map(orders, {order_id: #.id, customer: {id: #.customer.id, tier: #.customer.orders_count > 50 ? 'VIP' : #.customer.orders_count > 20 ? 'Premium' : 'Standard', discount_eligible: #.customer.tier == 'VIP' or sum(map(#.items, #.price * #.quantity)) > 500}, items: map(#.items, {sku: #.sku, name: #.name, quantity: #.quantity, unit_price: #.price, line_total: #.price * #.quantity, category: #.category, tax_rate: #.category == 'electronics' ? 0.08 : #.category == 'clothing' ? 0.06 : 0.05}), totals: {subtotal: sum(map(#.items, #.price * #.quantity)), tax: sum(map(#.items, #.price * #.quantity * (#.category == 'electronics' ? 0.08 : #.category == 'clothing' ? 0.06 : 0.05))), shipping: sum(map(#.items, #.price * #.quantity)) > 100 ? 0 : 15, discount: (#.customer.orders_count > 50 ? 0.15 : #.customer.orders_count > 20 ? 0.10 : 0) * sum(map(#.items, #.price * #.quantity))}, processing: {estimated_ship: d().add(contains(#.shipping_method, 'express') ? 1 : 3, 'day').format('%Y-%m-%d'), warehouse: #.items[0].category == 'electronics' ? 'Tech Hub' : 'Main Warehouse'}})",
          "sampleInput": "{\"orders\": [{\"id\": \"ORD001\", \"customer\": {\"id\": \"CUST001\", \"orders_count\": 35, \"tier\": \"Premium\"}, \"items\": [{\"sku\": \"SKU001\", \"name\": \"iPhone 15\", \"quantity\": 1, \"price\": 999, \"category\": \"electronics\"}, {\"sku\": \"SKU002\", \"name\": \"Leather Case\", \"quantity\": 1, \"price\": 59, \"category\": \"accessories\"}], \"shipping_method\": \"express\"}]}",
          "expectedOutput": "[{\"order_id\": \"ORD001\", \"customer\": {\"id\": \"CUST001\", \"tier\": \"Premium\", \"discount_eligible\": true}, \"items\": [{\"sku\": \"SKU001\", \"name\": \"iPhone 15\", \"quantity\": 1, \"unit_price\": 999, \"line_total\": 999, \"category\": \"electronics\", \"tax_rate\": 0.08}, {\"sku\": \"SKU002\", \"name\": \"Leather Case\", \"quantity\": 1, \"unit_price\": 59, \"line_total\": 59, \"category\": \"accessories\", \"tax_rate\": 0.05}], \"totals\": {\"subtotal\": 1058, \"tax\": 82.87, \"shipping\": 0, \"discount\": 105.8}, \"processing\": {\"estimated_ship\": \"2024-02-01\", \"warehouse\": \"Tech Hub\"}}]",
          "expectedParsed": [
            {
              "order_id": "ORD001",
              "customer": {
                "id": "CUST001",
                "tier": "Premium",
                "discount_eligible": true
              },
              "items": [
                {
                  "sku": "SKU001",
                  "name": "iPhone 15",
                  "quantity": 1,
                  "unit_price": 999,
                  "line_total": 999,
                  "category": "electronics",
                  "tax_rate": 0.08
                },
                {
                  "sku": "SKU002",
                  "name": "Leather Case",
                  "quantity": 1,
                  "unit_price": 59,
                  "line_total": 59,
                  "category": "accessories",
                  "tax_rate": 0.05
                }
              ],
              "totals": {
                "subtotal": 1058,
                "tax": 82.87,
                "shipping": 0,
                "discount": 105.8
              },
              "processing": {
                "estimated_ship": "2024-02-01",
                "warehouse": "Tech Hub"
              }
            }
          ],
          "actualResult": [
            {
              "customer": {
                "discount_eligible": true,
                "id": "CUST001",
                "tier": "Premium"
              },
              "items": [
                {
                  "category": "electronics",
                  "line_total": 999,
                  "name": "iPhone 15",
                  "quantity": 1,
                  "sku": "SKU001",
                  "tax_rate": 0.08,
                  "unit_price": 999
                },
                {
                  "category": "accessories",
                  "line_total": 59,
                  "name": "Leather Case",
                  "quantity": 1,
                  "sku": "SKU002",
                  "tax_rate": 0.05,
                  "unit_price": 59
                }
              ],
              "order_id": "ORD001",
              "processing": {
                "estimated_ship": "2025-06-01",
                "warehouse": "Tech Hub"
              },
              "totals": {
                "discount": 105.8,
                "shipping": 0,
                "subtotal": 1058,
                "tax": 82.87
              }
            }
          ],
          "category": "extreme-data"
        },
        {
          "file": "business_calculationsExamples.ts",
          "id": "complex-business-2",
          "title": "Employee Performance Score",
          "expression": "map(employees, {name: #.name, score: round(avg([#.sales, #.reviews, #.attendance]) * 100), grade: avg([#.sales, #.reviews, #.attendance]) >= 0.8 ? 'A' : avg([#.sales, #.reviews, #.attendance]) >= 0.6 ? 'B' : 'C'})",
          "sampleInput": "{\"employees\": [{\"name\": \"Alice\", \"sales\": 0.9, \"reviews\": 0.8, \"attendance\": 0.95}, {\"name\": \"Bob\", \"sales\": 0.6, \"reviews\": 0.7, \"attendance\": 0.5}]}",
          "expectedOutput": "[{\"name\": \"Alice\", \"score\": 88, \"grade\": \"A\"}, {\"name\": \"Bob\", \"score\": 60, \"grade\": \"C\"}]",
          "expectedParsed": [
            {
              "name": "Alice",
              "score": 88,
              "grade": "A"
            },
            {
              "name": "Bob",
              "score": 60,
              "grade": "C"
            }
          ],
          "actualResult": [
            {
              "grade": "A",
              "name": "Alice",
              "score": 88
            },
            {
              "grade": "B",
              "name": "Bob",
              "score": 60
            }
          ],
          "category": "complex-business"
        },
        {
          "file": "complexExamples.ts",
          "id": "extreme-betting-2",
          "title": "Multi-Leg Parlay Calculator",
          "expression": "map(parlays, {id: #.id, legs: len(#.selections), total_odds: round(#.selections[0].odds * #.selections[1].odds * #.selections[2].odds * 100) / 100, potential_payout: round(#.stake * #.selections[0].odds * #.selections[1].odds * #.selections[2].odds * 100) / 100, probability: round(100 / (#.selections[0].odds * #.selections[1].odds * #.selections[2].odds)), risk_rating: #.selections[0].odds * #.selections[1].odds * #.selections[2].odds > 10 ? 'High' : #.selections[0].odds * #.selections[1].odds * #.selections[2].odds > 5 ? 'Medium' : 'Low'})",
          "sampleInput": "{\"parlays\": [{\"id\": \"P001\", \"stake\": 100, \"selections\": [{\"match\": \"Lakers vs Warriors\", \"bet\": \"Lakers +5.5\", \"odds\": 1.91}, {\"match\": \"Patriots vs Chiefs\", \"bet\": \"Over 48.5\", \"odds\": 1.85}, {\"match\": \"Arsenal vs Chelsea\", \"bet\": \"Arsenal Win\", \"odds\": 2.10}]}]}",
          "expectedOutput": "[{\"id\": \"P001\", \"legs\": 3, \"total_odds\": 7.42, \"potential_payout\": 742.16, \"probability\": 13, \"risk_rating\": \"High\"}]",
          "expectedParsed": [
            {
              "id": "P001",
              "legs": 3,
              "total_odds": 7.42,
              "potential_payout": 742.16,
              "probability": 13,
              "risk_rating": "High"
            }
          ],
          "actualResult": [
            {
              "id": "P001",
              "legs": 3,
              "potential_payout": 742.04,
              "probability": 13,
              "risk_rating": "Medium",
              "total_odds": 7.42
            }
          ],
          "category": "extreme-sports-betting"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-2",
          "title": "Date Creation",
          "expression": "date(\"2023-09-18\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-18T00:00:00Z",
          "expectedParsed": "2023-09-18T00:00:00Z",
          "actualResult": 1694995200,
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-3",
          "title": "Date with Time",
          "expression": "d(\"2023-09-18T15:30:00\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-18T15:30:00Z",
          "expectedParsed": "2023-09-18T15:30:00Z",
          "actualResult": "Invalid date",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-4",
          "title": "Date Addition",
          "expression": "d(\"2023-09-18\").add(5, \"day\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-23T00:00:00Z",
          "expectedParsed": "2023-09-23T00:00:00Z",
          "actualResult": "2023-09-23T00:00:00+03:00",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-5",
          "title": "Date Subtraction",
          "expression": "d(\"2023-09-18\").sub(3, \"d\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-15T00:00:00Z",
          "expectedParsed": "2023-09-15T00:00:00Z",
          "actualResult": "2023-09-15T00:00:00+03:00",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-7",
          "title": "Date Formatting",
          "expression": "d(\"2023-09-18\").format(\"YYYY-MM-DD\")",
          "sampleInput": "{}",
          "expectedOutput": "\"2023-09-18\"",
          "expectedParsed": "2023-09-18",
          "actualResult": "YYYY-MM-DD",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-12",
          "title": "Calculate Days Between",
          "expression": "d(date(\"2023-09-18\")).diff(date(\"2023-09-15\"), \"day\")",
          "sampleInput": "{}",
          "expectedOutput": "7",
          "expectedParsed": 7,
          "actualResult": 0,
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-13",
          "title": "Check Weekend",
          "expression": "dayOfWeek(date(\"2023-09-18\")) > 5",
          "sampleInput": "{}",
          "expectedOutput": "true",
          "expectedParsed": true,
          "actualResult": false,
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-14",
          "title": "Add Months",
          "expression": "d(\"2023-09-18\").add(2, \"month\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-11-18T00:00:00Z",
          "expectedParsed": "2023-11-18T00:00:00Z",
          "actualResult": "2023-11-18T00:00:00+02:00",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-const-1",
          "title": "Date from Components",
          "expression": "d(\"2023-09-18\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-18T00:00:00Z",
          "expectedParsed": "2023-09-18T00:00:00Z",
          "actualResult": "2023-09-18T00:00:00+03:00",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-const-2",
          "title": "Date with Time Components",
          "expression": "d(\"2023-09-18T15:30:00\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-18T15:30:00Z",
          "expectedParsed": "2023-09-18T15:30:00Z",
          "actualResult": "Invalid date",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-const-3",
          "title": "Date from Timestamp",
          "expression": "date(1695038400000)",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-18T14:00:00Z",
          "expectedParsed": "2023-09-18T14:00:00Z",
          "actualResult": 1695038400000,
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-const-4",
          "title": "Date from ISO String",
          "expression": "date(\"2023-09-18T15:30:00.000Z\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-18T15:30:00Z",
          "expectedParsed": "2023-09-18T15:30:00Z",
          "actualResult": 1695051000,
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-const-5",
          "title": "Get Today at Midnight",
          "expression": "d()",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-18T00:00:00Z",
          "expectedParsed": "2023-09-18T00:00:00Z",
          "actualResult": "2025-05-31T14:30:21+03:00",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-const-6",
          "title": "Get Tomorrow at Midnight",
          "expression": "d(\"2023-01-01\").add(1, \"day\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-19T00:00:00Z",
          "expectedParsed": "2023-09-19T00:00:00Z",
          "actualResult": "2023-01-02T00:00:00+02:00",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-const-7",
          "title": "Get Yesterday at Midnight",
          "expression": "d().sub(1, \"d\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-17T00:00:00Z",
          "expectedParsed": "2023-09-17T00:00:00Z",
          "actualResult": "2025-05-30T14:30:21+03:00",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-const-8",
          "title": "Get Start of Day for Given Date",
          "expression": "d(\"2023-01-01\").startOf(\"day\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-18T00:00:00Z",
          "expectedParsed": "2023-09-18T00:00:00Z",
          "actualResult": "2023-01-01T00:00:00+02:00",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-const-9",
          "title": "Get End of Day for Given Date",
          "expression": "d(\"2023-01-01\").endOf(\"day\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-18T23:59:59Z",
          "expectedParsed": "2023-09-18T23:59:59Z",
          "actualResult": "2023-01-01T23:59:59+02:00",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-const-10",
          "title": "Get First Day of Month",
          "expression": "d(\"2023-01-01\").startOf(\"month\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-01T00:00:00Z",
          "expectedParsed": "2023-09-01T00:00:00Z",
          "actualResult": "2023-01-01T00:00:00+02:00",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-const-11",
          "title": "Get Last Day of Month",
          "expression": "d(\"2023-01-01\").endOf(\"month\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-30T23:59:59Z",
          "expectedParsed": "2023-09-30T23:59:59Z",
          "actualResult": "2023-01-31T23:59:59+02:00",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-const-12",
          "title": "Date from Variable",
          "expression": "date(dateString)",
          "sampleInput": "{\"dateString\": \"2023-09-18\"}",
          "expectedOutput": "2023-09-18T00:00:00Z",
          "expectedParsed": "2023-09-18T00:00:00Z",
          "actualResult": 1694995200,
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-parts-1",
          "title": "Extract Hour",
          "expression": "d(\"2023-09-18T15:30:45\").hour()",
          "sampleInput": "{}",
          "expectedOutput": "15",
          "expectedParsed": 15,
          "actualResult": {},
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-parts-2",
          "title": "Extract Minute",
          "expression": "d(\"2023-09-18T15:30:45\").minute()",
          "sampleInput": "{}",
          "expectedOutput": "30",
          "expectedParsed": 30,
          "actualResult": {},
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-parts-3",
          "title": "Extract Second",
          "expression": "d(\"2023-09-18T15:30:45\").second()",
          "sampleInput": "{}",
          "expectedOutput": "45",
          "expectedParsed": 45,
          "actualResult": {},
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-parts-4",
          "title": "Get Timestamp",
          "expression": "d(\"2023-09-18T15:30:00\").timestamp()",
          "sampleInput": "{}",
          "expectedOutput": "1695043800000",
          "expectedParsed": 1695043800000,
          "actualResult": {},
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-parts-10",
          "title": "Calculate Age Between Two Dates",
          "expression": "d(date(\"2023-09-18\")).diff(date(\"2022-09-18\"), \"day\")",
          "sampleInput": "{}",
          "expectedOutput": "365",
          "expectedParsed": 365,
          "actualResult": 0,
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "complex-date-2",
          "title": "Business Days Calculation",
          "expression": "map(projects, {name: #.name, duration: d(#.endDate).diff(d(#.startDate), 'day'), workdays: count(map([0..d(#.endDate).diff(d(#.startDate), 'day')], d(#.startDate).add(#, 'day').weekday()), # != 6 and # != 7)})",
          "sampleInput": "{\"projects\": [{\"name\": \"Project A\", \"startDate\": \"2023-10-02\", \"endDate\": \"2023-10-06\"}]}",
          "expectedOutput": "[{\"name\": \"Project A\", \"duration\": 4, \"workdays\": 4}]",
          "expectedParsed": [
            {
              "name": "Project A",
              "duration": 4,
              "workdays": 4
            }
          ],
          "actualResult": [
            {
              "duration": 4,
              "name": "Project A",
              "workdays": 5
            }
          ],
          "category": "complex-date"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "extreme-events-1",
          "title": "Complex Event Scheduling with Timezone Management",
          "expression": "map(events, {id: #.id, title: #.title, local_start: d(#.start_utc).tz(#.timezone).format('%Y-%m-%d %H:%M %Z'), duration_hours: d(#.end_utc).diff(d(#.start_utc), 'hour'), attendees: {registered: len(#.attendees), capacity: #.capacity, utilization: round(len(#.attendees) / #.capacity * 100)}, conflicts: count(filter(events, #.id != #.id and d(#.start_utc).isBefore(d(#.end_utc)) and d(#.end_utc).isAfter(d(#.start_utc))), true), status: len(#.attendees) >= #.capacity ? 'Full' : d(#.start_utc).isBefore(d()) ? 'Past' : 'Available'})",
          "sampleInput": "{\"events\": [{\"id\": \"E001\", \"title\": \"Tech Conference 2024\", \"start_utc\": \"2024-03-15T09:00:00Z\", \"end_utc\": \"2024-03-15T17:00:00Z\", \"timezone\": \"America/New_York\", \"capacity\": 500, \"attendees\": [{\"name\": \"John\"}, {\"name\": \"Jane\"}]}, {\"id\": \"E002\", \"title\": \"Workshop Session\", \"start_utc\": \"2024-03-15T14:00:00Z\", \"end_utc\": \"2024-03-15T16:00:00Z\", \"timezone\": \"America/New_York\", \"capacity\": 50, \"attendees\": []}]}",
          "expectedOutput": "[{\"id\": \"E001\", \"title\": \"Tech Conference 2024\", \"local_start\": \"2024-03-15 05:00 EST\", \"duration_hours\": 8, \"attendees\": {\"registered\": 2, \"capacity\": 500, \"utilization\": 0}, \"conflicts\": 1, \"status\": \"Available\"}, {\"id\": \"E002\", \"title\": \"Workshop Session\", \"local_start\": \"2024-03-15 10:00 EST\", \"duration_hours\": 2, \"attendees\": {\"registered\": 0, \"capacity\": 50, \"utilization\": 0}, \"conflicts\": 1, \"status\": \"Available\"}]",
          "expectedParsed": [
            {
              "id": "E001",
              "title": "Tech Conference 2024",
              "local_start": "2024-03-15 05:00 EST",
              "duration_hours": 8,
              "attendees": {
                "registered": 2,
                "capacity": 500,
                "utilization": 0
              },
              "conflicts": 1,
              "status": "Available"
            },
            {
              "id": "E002",
              "title": "Workshop Session",
              "local_start": "2024-03-15 10:00 EST",
              "duration_hours": 2,
              "attendees": {
                "registered": 0,
                "capacity": 50,
                "utilization": 0
              },
              "conflicts": 1,
              "status": "Available"
            }
          ],
          "actualResult": [
            {
              "attendees": {
                "capacity": 500,
                "registered": 2,
                "utilization": 0
              },
              "conflicts": 0,
              "duration_hours": 8,
              "id": "E001",
              "local_start": "2024-03-15 03:00 EDT",
              "status": "Past",
              "title": "Tech Conference 2024"
            },
            {
              "attendees": {
                "capacity": 50,
                "registered": 0,
                "utilization": 0
              },
              "conflicts": 0,
              "duration_hours": 2,
              "id": "E002",
              "local_start": "2024-03-15 08:00 EDT",
              "status": "Past",
              "title": "Workshop Session"
            }
          ],
          "category": "extreme-events"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "complex-math-31",
          "title": "Standard Deviation Calculation",
          "expression": "round((sum(map(numbers, (#- avg(numbers)) ^ 2)) / len(numbers)) ^ 0.5 * 100) / 100",
          "sampleInput": "{\"numbers\": [1, 2, 2, 3, 4, 4, 4, 5]}",
          "expectedOutput": "1.36",
          "expectedParsed": 1.36,
          "actualResult": 1.27,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "decimal-7",
          "title": "Complex Expression with Decimal Precision Control",
          "expression": "round((0.1 + 0.2) * 3, 10)",
          "sampleInput": "{}",
          "expectedOutput": "0.45",
          "expectedParsed": 0.45,
          "actualResult": 0.9,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "round-9",
          "title": "Round to Tens",
          "expression": "round(1234)",
          "sampleInput": "{}",
          "expectedOutput": "1230",
          "expectedParsed": 1230,
          "actualResult": 1234,
          "category": "mathematical-operations"
        },
        {
          "file": "stringOperationsExamples.ts",
          "id": "complex-template-1",
          "title": "Dynamic Report Generation",
          "expression": "`Report Summary:\nTotal Orders: ${len(orders)}\nRevenue: $${sum(map(orders, #.total))}\nTop Customer: ${map(orders, #.customer)[0]}\nGenerated: ${d().format(\"%Y-%m-%d %H:%M\")}`",
          "sampleInput": "{\"orders\": [{\"customer\": \"Alice\", \"total\": 250}, {\"customer\": \"Bob\", \"total\": 150}]}",
          "expectedOutput": "\"Report Summary:\\nTotal Orders: 2\\nRevenue: $400\\nTop Customer: Alice\\nGenerated: 2023-10-15 14:30\"",
          "expectedParsed": "Report Summary:\\nTotal Orders: 2\\nRevenue: $400\\nTop Customer: Alice\\nGenerated: 2023-10-15 14:30",
          "actualResult": "Report Summary:\nTotal Orders: 2\nRevenue: $400\nTop Customer: Alice\nGenerated: 2025-05-31 14:30",
          "category": "complex-template"
        },
        {
          "file": "utility_functionsExamples.ts",
          "id": "util-10",
          "title": "Date Set Year",
          "expression": "d(\"2023-10-15\").set(\"year\", 2024)",
          "sampleInput": "{}",
          "expectedOutput": "\"2024-10-15T00:00:00Z\"",
          "expectedParsed": "2024-10-15T00:00:00Z",
          "actualResult": "2024-10-15T00:00:00+03:00",
          "category": "utility-functions"
        },
        {
          "file": "utility_functionsExamples.ts",
          "id": "util-11",
          "title": "Date Set Month",
          "expression": "d(\"2023-10-15\").set(\"month\", 5)",
          "sampleInput": "{}",
          "expectedOutput": "\"2023-05-15T00:00:00Z\"",
          "expectedParsed": "2023-05-15T00:00:00Z",
          "actualResult": "2023-05-15T00:00:00+03:00",
          "category": "utility-functions"
        },
        {
          "file": "utility_functionsExamples.ts",
          "id": "util-12",
          "title": "Date Set Day",
          "expression": "d(\"2023-10-15\").set(\"day\", 20)",
          "sampleInput": "{}",
          "expectedOutput": "\"2023-10-20T00:00:00Z\"",
          "expectedParsed": "2023-10-20T00:00:00Z",
          "actualResult": "2023-10-20T00:00:00+03:00",
          "category": "utility-functions"
        },
        {
          "file": "utility_functionsExamples.ts",
          "id": "util-13",
          "title": "Date Set Hour",
          "expression": "d(\"2023-10-15T10:30:00Z\").set(\"hour\", 15)",
          "sampleInput": "{}",
          "expectedOutput": "\"2023-10-15T15:30:00Z\"",
          "expectedParsed": "2023-10-15T15:30:00Z",
          "actualResult": "2023-10-15T15:30:00+03:00",
          "category": "utility-functions"
        },
        {
          "file": "utility_functionsExamples.ts",
          "id": "util-14",
          "title": "Date Set Minute",
          "expression": "d(\"2023-10-15T10:30:00Z\").set(\"minute\", 45)",
          "sampleInput": "{}",
          "expectedOutput": "\"2023-10-15T10:45:00Z\"",
          "expectedParsed": "2023-10-15T10:45:00Z",
          "actualResult": "2023-10-15T10:45:00+03:00",
          "category": "utility-functions"
        }
      ],
      "floatingPoint": [
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "math-7",
          "title": "Square Root",
          "expression": "4 ^ 0.5",
          "sampleInput": "{}",
          "expectedOutput": "2",
          "expectedParsed": 2,
          "actualResult": 1.999999992473416,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "math-15",
          "title": "Fractional Power",
          "expression": "9 ^ 0.5",
          "sampleInput": "{}",
          "expectedOutput": "3",
          "expectedParsed": 3,
          "actualResult": 2.9999999929549435,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "math-23",
          "title": "Square Root of a Squared Number",
          "expression": "(5 ^ 2) ^ 0.5",
          "sampleInput": "{}",
          "expectedOutput": "5",
          "expectedParsed": 5,
          "actualResult": 4.999999989955171,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "complex-math-3",
          "title": "Combination of Square Root and Power Operations",
          "expression": "(16) ^ 0.5 * 2",
          "sampleInput": "{}",
          "expectedOutput": "8",
          "expectedParsed": 8,
          "actualResult": 7.999999975121966,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "complex-math-9",
          "title": "Nested Square Root Operations",
          "expression": "4 ^ 0.5",
          "sampleInput": "{}",
          "expectedOutput": "2",
          "expectedParsed": 2,
          "actualResult": 1.999999992473416,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "complex-math-13",
          "title": "Square Root of Sum",
          "expression": "(5 ^ 2 + 12 ^ 2) ^ 0.5",
          "sampleInput": "{}",
          "expectedOutput": "13",
          "expectedParsed": 13,
          "actualResult": 12.999999970526881,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "complex-math-14",
          "title": "Fractional Exponents",
          "expression": "8 ^ (1/3)",
          "sampleInput": "{}",
          "expectedOutput": "2",
          "expectedParsed": 2,
          "actualResult": 1.999999992473416,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "complex-math-26",
          "title": "Geometric Mean",
          "expression": "(a * b) ^ 0.5",
          "sampleInput": "{\"a\": 4, \"b\": 9}",
          "expectedOutput": "6",
          "expectedParsed": 6,
          "actualResult": 5.999999994581474,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "complex-math-32",
          "title": "Exponential Growth",
          "expression": "initial * e ^ (rate * time)",
          "sampleInput": "{\"initial\": 100, \"e\": 2.71828, \"rate\": 0.1, \"time\": 5}",
          "expectedOutput": "164.872",
          "expectedParsed": 164.872,
          "actualResult": 164.8720710527668,
          "category": "mathematical-operations"
        }
      ],
      "stringEscape": [
        {
          "file": "stringOperationsExamples.ts",
          "id": "template-2",
          "title": "Template with Expression",
          "expression": "`The length of \"${text}\" is ${len(text)} characters`",
          "sampleInput": "{\"text\": \"hello\"}",
          "expectedOutput": "\"The length of \\\"hello\\\" is 5 characters\"",
          "expectedParsed": "The length of \\\"hello\\\" is 5 characters",
          "actualResult": "The length of \"hello\" is 5 characters",
          "category": "string-operations"
        }
      ],
      "objectFormat": [],
      "arrayFormat": [],
      "templateFormat": [
        {
          "file": "templateExamples.ts",
          "id": "template-8",
          "title": "Unary Context Template",
          "expression": "`simple template`",
          "sampleInput": "{\"$\": \"simple template\"}",
          "expectedOutput": "true",
          "expectedParsed": true,
          "actualResult": "simple template",
          "category": "template"
        },
        {
          "file": "templateExamples.ts",
          "id": "template-9",
          "title": "Unary Sum Template",
          "expression": "`sum of numbers ${sum([1, 2, 3])}`",
          "sampleInput": "{\"$\": \"sum of numbers 6\"}",
          "expectedOutput": "true",
          "expectedParsed": true,
          "actualResult": "sum of numbers 6",
          "category": "template"
        },
        {
          "file": "templateExamples.ts",
          "id": "template-10",
          "title": "Unary Variable Template",
          "expression": "`reference env: ${a}`",
          "sampleInput": "{\"$\": \"reference env: example\", \"a\": \"example\"}",
          "expectedOutput": "true",
          "expectedParsed": true,
          "actualResult": "reference env: example",
          "category": "template"
        }
      ],
      "rangeFormat": [
        {
          "file": "arrayOperationsExamples.ts",
          "id": "array-adv-6",
          "title": "String Array Transformation",
          "expression": "map(['a', 'b', 'c'], # + '!')",
          "sampleInput": "{}",
          "expectedOutput": "['a!', 'b!', 'c!']",
          "expectedParsed": "['a!', 'b!', 'c!']",
          "actualResult": [
            "a!",
            "b!",
            "c!"
          ],
          "category": "array-operations"
        },
        {
          "file": "arrayOperationsExamples.ts",
          "id": "array-adv-7",
          "title": "String Array Filter",
          "expression": "filter(['a', 'b', 'c', 'd'], # in ['a', 'c'])",
          "sampleInput": "{}",
          "expectedOutput": "['a', 'c']",
          "expectedParsed": "['a', 'c']",
          "actualResult": [
            "a",
            "c"
          ],
          "category": "array-operations"
        },
        {
          "file": "arrayOperationsExamples.ts",
          "id": "array-adv-18",
          "title": "Object Array Filter",
          "expression": "filter([{id: 1, name: \"John\"}, {id: 2, name: \"Jane\"}], #.id > 1)",
          "sampleInput": "{}",
          "expectedOutput": "[{id: 2, name: \"Jane\"}]",
          "expectedParsed": "[{id: 2, name: \"Jane\"}]",
          "actualResult": [
            {
              "id": 2,
              "name": "Jane"
            }
          ],
          "category": "array-operations"
        },
        {
          "file": "arrayOperationsExamples.ts",
          "id": "complex-array-2",
          "title": "Data Pivot and Aggregation",
          "expression": "map(keys(map(sales, #.region)), {region: #, total_sales: sum(map(filter(sales, #.region == #), #.amount)), count: count(sales, #.region == #)})",
          "sampleInput": "{\"sales\": [{\"region\": \"North\", \"amount\": 100}, {\"region\": \"South\", \"amount\": 150}, {\"region\": \"North\", \"amount\": 200}, {\"region\": \"East\", \"amount\": 75}]}",
          "expectedOutput": "[{\"region\": \"North\", \"total_sales\": 300, \"count\": 2}, {\"region\": \"South\", \"total_sales\": 150, \"count\": 1}, {\"region\": \"East\", \"total_sales\": 75, \"count\": 1}]",
          "expectedParsed": [
            {
              "region": "North",
              "total_sales": 300,
              "count": 2
            },
            {
              "region": "South",
              "total_sales": 150,
              "count": 1
            },
            {
              "region": "East",
              "total_sales": 75,
              "count": 1
            }
          ],
          "actualResult": [
            {
              "count": 0,
              "region": 0,
              "total_sales": 0
            },
            {
              "count": 0,
              "region": 1,
              "total_sales": 0
            },
            {
              "count": 0,
              "region": 2,
              "total_sales": 0
            },
            {
              "count": 0,
              "region": 3,
              "total_sales": 0
            }
          ],
          "category": "complex-array"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "complex-math-10",
          "title": "Complex Modulo Chain",
          "expression": "((20 % 7) + 3) % 5",
          "sampleInput": "{}",
          "expectedOutput": "1",
          "expectedParsed": 1,
          "actualResult": 4,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "complex-math-22",
          "title": "Distance Formula",
          "expression": "((x2 - x1) ^ 0.5 ^ 2 + (y2 - y1) ^ 2)",
          "sampleInput": "{\"x1\": 0, \"y1\": 0, \"x2\": 3, \"y2\": 4}",
          "expectedOutput": "5",
          "expectedParsed": 5,
          "actualResult": 17.316074012124222,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "complex-math-33",
          "title": "Complex Nested Mathematical Expression",
          "expression": "((2 + 3) * (4 - 1)) + (6 / 2) + (16) ^ 0.5",
          "sampleInput": "{}",
          "expectedOutput": "20",
          "expectedParsed": 20,
          "actualResult": 21.999999987560983,
          "category": "mathematical-operations"
        },
        {
          "file": "stringOperationsExamples.ts",
          "id": "slice-1",
          "title": "Basic String Slice",
          "expression": "text[0:5]",
          "sampleInput": "{\"text\": \"hello world\"}",
          "expectedOutput": "\"hello\"",
          "expectedParsed": "hello",
          "actualResult": "hello ",
          "category": "string-operations"
        },
        {
          "file": "stringOperationsExamples.ts",
          "id": "slice-4",
          "title": "String Slice from Start",
          "expression": "text[:5]",
          "sampleInput": "{\"text\": \"hello world\"}",
          "expectedOutput": "\"hello\"",
          "expectedParsed": "hello",
          "actualResult": "hello ",
          "category": "string-operations"
        },
        {
          "file": "stringOperationsExamples.ts",
          "id": "slice-5",
          "title": "Variable String Slice",
          "expression": "text[start:end]",
          "sampleInput": "{\"text\": \"programming\", \"start\": 0, \"end\": 7}",
          "expectedOutput": "\"program\"",
          "expectedParsed": "program",
          "actualResult": "programm",
          "category": "string-operations"
        },
        {
          "file": "stringOperationsExamples.ts",
          "id": "slice-6",
          "title": "Single Character Access",
          "expression": "text[1:2]",
          "sampleInput": "{\"text\": \"hello\"}",
          "expectedOutput": "\"e\"",
          "expectedParsed": "e",
          "actualResult": "el",
          "category": "string-operations"
        },
        {
          "file": "stringOperationsExamples.ts",
          "id": "slice-7",
          "title": "Dynamic Slice with Length",
          "expression": "name[0:len(name)-1]",
          "sampleInput": "{\"name\": \"Alice\"}",
          "expectedOutput": "\"Alic\"",
          "expectedParsed": "Alic",
          "actualResult": "Alice",
          "category": "string-operations"
        },
        {
          "file": "stringOperationsExamples.ts",
          "id": "slice-8",
          "title": "Conditional String Slicing",
          "expression": "len(text) > 5 ? text[0:5] + \"...\" : text",
          "sampleInput": "{\"text\": \"This is a long string\"}",
          "expectedOutput": "\"This ...\"",
          "expectedParsed": "This ...",
          "actualResult": "This i...",
          "category": "string-operations"
        },
        {
          "file": "unary_operationsExamples.ts",
          "id": "unary-7",
          "title": "Range Check Inclusive",
          "expression": "[-10..0]",
          "sampleInput": "{\"$\": 0}",
          "expectedOutput": "true",
          "expectedParsed": true,
          "actualResult": "[-10..0]",
          "category": "unary-operations"
        },
        {
          "file": "unary_operationsExamples.ts",
          "id": "unary-8",
          "title": "Range Check Exclusive Start",
          "expression": "(-10..0]",
          "sampleInput": "{\"$\": -10}",
          "expectedOutput": "false",
          "expectedParsed": false,
          "actualResult": "(-10..0]",
          "category": "unary-operations"
        },
        {
          "file": "unary_operationsExamples.ts",
          "id": "unary-9",
          "title": "Range Check Exclusive End",
          "expression": "[-10..0)",
          "sampleInput": "{\"$\": -10}",
          "expectedOutput": "true",
          "expectedParsed": true,
          "actualResult": "[-10..0)",
          "category": "unary-operations"
        },
        {
          "file": "unary_operationsExamples.ts",
          "id": "unary-10",
          "title": "Range Check Both Exclusive",
          "expression": "(-10..0)",
          "sampleInput": "{\"$\": 0}",
          "expectedOutput": "false",
          "expectedParsed": false,
          "actualResult": "(-10..0)",
          "category": "unary-operations"
        },
        {
          "file": "unary_operationsExamples.ts",
          "id": "unary-11",
          "title": "Complex Range Check",
          "expression": "[-15..-5]",
          "sampleInput": "{\"$\": -4.99}",
          "expectedOutput": "false",
          "expectedParsed": false,
          "actualResult": "[-15..-5]",
          "category": "unary-operations"
        },
        {
          "file": "unary_operationsExamples.ts",
          "id": "unary-14",
          "title": "String Set Check",
          "expression": "[\"GB\", \"US\"]",
          "sampleInput": "{\"$\": \"US\"}",
          "expectedOutput": "true",
          "expectedParsed": true,
          "actualResult": [
            "GB",
            "US"
          ],
          "category": "unary-operations"
        }
      ],
      "typeCoercion": [],
      "other": [
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "decimal-1",
          "title": "Decimal Addition Precision",
          "expression": "0.1 + 0.2 == 0.3",
          "sampleInput": "{}",
          "expectedOutput": "false",
          "expectedParsed": false,
          "actualResult": true,
          "category": "mathematical-operations"
        },
        {
          "file": "stringOperationsExamples.ts",
          "id": "complex-template-2",
          "title": "User Notification Message",
          "expression": "\"Complex template result\"",
          "sampleInput": "{\"user\": {\"name\": \"John\", \"messages\": 3, \"lastLogin\": \"2023-10-01\"}}",
          "expectedOutput": "\"Hello John! You have 3 new messages. Last login: October 01, 2023\"",
          "expectedParsed": "Hello John! You have 3 new messages. Last login: October 01, 2023",
          "actualResult": "Complex template result",
          "category": "complex-template"
        },
        {
          "file": "unary_operationsExamples.ts",
          "id": "unary-2",
          "title": "Boolean Context False",
          "expression": "true",
          "sampleInput": "{ \"$\": false }",
          "expectedOutput": "false",
          "expectedParsed": false,
          "actualResult": true,
          "category": "unary-operations"
        }
      ]
    },
    "byFile": {
      "arrayOperationsExamples.ts": [
        {
          "file": "arrayOperationsExamples.ts",
          "id": "array-adv-6",
          "title": "String Array Transformation",
          "expression": "map(['a', 'b', 'c'], # + '!')",
          "sampleInput": "{}",
          "expectedOutput": "['a!', 'b!', 'c!']",
          "expectedParsed": "['a!', 'b!', 'c!']",
          "actualResult": [
            "a!",
            "b!",
            "c!"
          ],
          "category": "array-operations"
        },
        {
          "file": "arrayOperationsExamples.ts",
          "id": "array-adv-7",
          "title": "String Array Filter",
          "expression": "filter(['a', 'b', 'c', 'd'], # in ['a', 'c'])",
          "sampleInput": "{}",
          "expectedOutput": "['a', 'c']",
          "expectedParsed": "['a', 'c']",
          "actualResult": [
            "a",
            "c"
          ],
          "category": "array-operations"
        },
        {
          "file": "arrayOperationsExamples.ts",
          "id": "array-adv-18",
          "title": "Object Array Filter",
          "expression": "filter([{id: 1, name: \"John\"}, {id: 2, name: \"Jane\"}], #.id > 1)",
          "sampleInput": "{}",
          "expectedOutput": "[{id: 2, name: \"Jane\"}]",
          "expectedParsed": "[{id: 2, name: \"Jane\"}]",
          "actualResult": [
            {
              "id": 2,
              "name": "Jane"
            }
          ],
          "category": "array-operations"
        },
        {
          "file": "arrayOperationsExamples.ts",
          "id": "complex-array-2",
          "title": "Data Pivot and Aggregation",
          "expression": "map(keys(map(sales, #.region)), {region: #, total_sales: sum(map(filter(sales, #.region == #), #.amount)), count: count(sales, #.region == #)})",
          "sampleInput": "{\"sales\": [{\"region\": \"North\", \"amount\": 100}, {\"region\": \"South\", \"amount\": 150}, {\"region\": \"North\", \"amount\": 200}, {\"region\": \"East\", \"amount\": 75}]}",
          "expectedOutput": "[{\"region\": \"North\", \"total_sales\": 300, \"count\": 2}, {\"region\": \"South\", \"total_sales\": 150, \"count\": 1}, {\"region\": \"East\", \"total_sales\": 75, \"count\": 1}]",
          "expectedParsed": [
            {
              "region": "North",
              "total_sales": 300,
              "count": 2
            },
            {
              "region": "South",
              "total_sales": 150,
              "count": 1
            },
            {
              "region": "East",
              "total_sales": 75,
              "count": 1
            }
          ],
          "actualResult": [
            {
              "count": 0,
              "region": 0,
              "total_sales": 0
            },
            {
              "count": 0,
              "region": 1,
              "total_sales": 0
            },
            {
              "count": 0,
              "region": 2,
              "total_sales": 0
            },
            {
              "count": 0,
              "region": 3,
              "total_sales": 0
            }
          ],
          "category": "complex-array"
        },
        {
          "file": "arrayOperationsExamples.ts",
          "id": "extreme-data-1",
          "title": "Nested E-commerce Order Processing Pipeline",
          "expression": "map(orders, {order_id: #.id, customer: {id: #.customer.id, tier: #.customer.orders_count > 50 ? 'VIP' : #.customer.orders_count > 20 ? 'Premium' : 'Standard', discount_eligible: #.customer.tier == 'VIP' or sum(map(#.items, #.price * #.quantity)) > 500}, items: map(#.items, {sku: #.sku, name: #.name, quantity: #.quantity, unit_price: #.price, line_total: #.price * #.quantity, category: #.category, tax_rate: #.category == 'electronics' ? 0.08 : #.category == 'clothing' ? 0.06 : 0.05}), totals: {subtotal: sum(map(#.items, #.price * #.quantity)), tax: sum(map(#.items, #.price * #.quantity * (#.category == 'electronics' ? 0.08 : #.category == 'clothing' ? 0.06 : 0.05))), shipping: sum(map(#.items, #.price * #.quantity)) > 100 ? 0 : 15, discount: (#.customer.orders_count > 50 ? 0.15 : #.customer.orders_count > 20 ? 0.10 : 0) * sum(map(#.items, #.price * #.quantity))}, processing: {estimated_ship: d().add(contains(#.shipping_method, 'express') ? 1 : 3, 'day').format('%Y-%m-%d'), warehouse: #.items[0].category == 'electronics' ? 'Tech Hub' : 'Main Warehouse'}})",
          "sampleInput": "{\"orders\": [{\"id\": \"ORD001\", \"customer\": {\"id\": \"CUST001\", \"orders_count\": 35, \"tier\": \"Premium\"}, \"items\": [{\"sku\": \"SKU001\", \"name\": \"iPhone 15\", \"quantity\": 1, \"price\": 999, \"category\": \"electronics\"}, {\"sku\": \"SKU002\", \"name\": \"Leather Case\", \"quantity\": 1, \"price\": 59, \"category\": \"accessories\"}], \"shipping_method\": \"express\"}]}",
          "expectedOutput": "[{\"order_id\": \"ORD001\", \"customer\": {\"id\": \"CUST001\", \"tier\": \"Premium\", \"discount_eligible\": true}, \"items\": [{\"sku\": \"SKU001\", \"name\": \"iPhone 15\", \"quantity\": 1, \"unit_price\": 999, \"line_total\": 999, \"category\": \"electronics\", \"tax_rate\": 0.08}, {\"sku\": \"SKU002\", \"name\": \"Leather Case\", \"quantity\": 1, \"unit_price\": 59, \"line_total\": 59, \"category\": \"accessories\", \"tax_rate\": 0.05}], \"totals\": {\"subtotal\": 1058, \"tax\": 82.87, \"shipping\": 0, \"discount\": 105.8}, \"processing\": {\"estimated_ship\": \"2024-02-01\", \"warehouse\": \"Tech Hub\"}}]",
          "expectedParsed": [
            {
              "order_id": "ORD001",
              "customer": {
                "id": "CUST001",
                "tier": "Premium",
                "discount_eligible": true
              },
              "items": [
                {
                  "sku": "SKU001",
                  "name": "iPhone 15",
                  "quantity": 1,
                  "unit_price": 999,
                  "line_total": 999,
                  "category": "electronics",
                  "tax_rate": 0.08
                },
                {
                  "sku": "SKU002",
                  "name": "Leather Case",
                  "quantity": 1,
                  "unit_price": 59,
                  "line_total": 59,
                  "category": "accessories",
                  "tax_rate": 0.05
                }
              ],
              "totals": {
                "subtotal": 1058,
                "tax": 82.87,
                "shipping": 0,
                "discount": 105.8
              },
              "processing": {
                "estimated_ship": "2024-02-01",
                "warehouse": "Tech Hub"
              }
            }
          ],
          "actualResult": [
            {
              "customer": {
                "discount_eligible": true,
                "id": "CUST001",
                "tier": "Premium"
              },
              "items": [
                {
                  "category": "electronics",
                  "line_total": 999,
                  "name": "iPhone 15",
                  "quantity": 1,
                  "sku": "SKU001",
                  "tax_rate": 0.08,
                  "unit_price": 999
                },
                {
                  "category": "accessories",
                  "line_total": 59,
                  "name": "Leather Case",
                  "quantity": 1,
                  "sku": "SKU002",
                  "tax_rate": 0.05,
                  "unit_price": 59
                }
              ],
              "order_id": "ORD001",
              "processing": {
                "estimated_ship": "2025-06-01",
                "warehouse": "Tech Hub"
              },
              "totals": {
                "discount": 105.8,
                "shipping": 0,
                "subtotal": 1058,
                "tax": 82.87
              }
            }
          ],
          "category": "extreme-data"
        }
      ],
      "business_calculationsExamples.ts": [
        {
          "file": "business_calculationsExamples.ts",
          "id": "complex-business-2",
          "title": "Employee Performance Score",
          "expression": "map(employees, {name: #.name, score: round(avg([#.sales, #.reviews, #.attendance]) * 100), grade: avg([#.sales, #.reviews, #.attendance]) >= 0.8 ? 'A' : avg([#.sales, #.reviews, #.attendance]) >= 0.6 ? 'B' : 'C'})",
          "sampleInput": "{\"employees\": [{\"name\": \"Alice\", \"sales\": 0.9, \"reviews\": 0.8, \"attendance\": 0.95}, {\"name\": \"Bob\", \"sales\": 0.6, \"reviews\": 0.7, \"attendance\": 0.5}]}",
          "expectedOutput": "[{\"name\": \"Alice\", \"score\": 88, \"grade\": \"A\"}, {\"name\": \"Bob\", \"score\": 60, \"grade\": \"C\"}]",
          "expectedParsed": [
            {
              "name": "Alice",
              "score": 88,
              "grade": "A"
            },
            {
              "name": "Bob",
              "score": 60,
              "grade": "C"
            }
          ],
          "actualResult": [
            {
              "grade": "A",
              "name": "Alice",
              "score": 88
            },
            {
              "grade": "B",
              "name": "Bob",
              "score": 60
            }
          ],
          "category": "complex-business"
        }
      ],
      "complexExamples.ts": [
        {
          "file": "complexExamples.ts",
          "id": "extreme-betting-2",
          "title": "Multi-Leg Parlay Calculator",
          "expression": "map(parlays, {id: #.id, legs: len(#.selections), total_odds: round(#.selections[0].odds * #.selections[1].odds * #.selections[2].odds * 100) / 100, potential_payout: round(#.stake * #.selections[0].odds * #.selections[1].odds * #.selections[2].odds * 100) / 100, probability: round(100 / (#.selections[0].odds * #.selections[1].odds * #.selections[2].odds)), risk_rating: #.selections[0].odds * #.selections[1].odds * #.selections[2].odds > 10 ? 'High' : #.selections[0].odds * #.selections[1].odds * #.selections[2].odds > 5 ? 'Medium' : 'Low'})",
          "sampleInput": "{\"parlays\": [{\"id\": \"P001\", \"stake\": 100, \"selections\": [{\"match\": \"Lakers vs Warriors\", \"bet\": \"Lakers +5.5\", \"odds\": 1.91}, {\"match\": \"Patriots vs Chiefs\", \"bet\": \"Over 48.5\", \"odds\": 1.85}, {\"match\": \"Arsenal vs Chelsea\", \"bet\": \"Arsenal Win\", \"odds\": 2.10}]}]}",
          "expectedOutput": "[{\"id\": \"P001\", \"legs\": 3, \"total_odds\": 7.42, \"potential_payout\": 742.16, \"probability\": 13, \"risk_rating\": \"High\"}]",
          "expectedParsed": [
            {
              "id": "P001",
              "legs": 3,
              "total_odds": 7.42,
              "potential_payout": 742.16,
              "probability": 13,
              "risk_rating": "High"
            }
          ],
          "actualResult": [
            {
              "id": "P001",
              "legs": 3,
              "potential_payout": 742.04,
              "probability": 13,
              "risk_rating": "Medium",
              "total_odds": 7.42
            }
          ],
          "category": "extreme-sports-betting"
        }
      ],
      "dateOperationsExamples.ts": [
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-2",
          "title": "Date Creation",
          "expression": "date(\"2023-09-18\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-18T00:00:00Z",
          "expectedParsed": "2023-09-18T00:00:00Z",
          "actualResult": 1694995200,
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-3",
          "title": "Date with Time",
          "expression": "d(\"2023-09-18T15:30:00\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-18T15:30:00Z",
          "expectedParsed": "2023-09-18T15:30:00Z",
          "actualResult": "Invalid date",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-4",
          "title": "Date Addition",
          "expression": "d(\"2023-09-18\").add(5, \"day\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-23T00:00:00Z",
          "expectedParsed": "2023-09-23T00:00:00Z",
          "actualResult": "2023-09-23T00:00:00+03:00",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-5",
          "title": "Date Subtraction",
          "expression": "d(\"2023-09-18\").sub(3, \"d\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-15T00:00:00Z",
          "expectedParsed": "2023-09-15T00:00:00Z",
          "actualResult": "2023-09-15T00:00:00+03:00",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-7",
          "title": "Date Formatting",
          "expression": "d(\"2023-09-18\").format(\"YYYY-MM-DD\")",
          "sampleInput": "{}",
          "expectedOutput": "\"2023-09-18\"",
          "expectedParsed": "2023-09-18",
          "actualResult": "YYYY-MM-DD",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-12",
          "title": "Calculate Days Between",
          "expression": "d(date(\"2023-09-18\")).diff(date(\"2023-09-15\"), \"day\")",
          "sampleInput": "{}",
          "expectedOutput": "7",
          "expectedParsed": 7,
          "actualResult": 0,
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-13",
          "title": "Check Weekend",
          "expression": "dayOfWeek(date(\"2023-09-18\")) > 5",
          "sampleInput": "{}",
          "expectedOutput": "true",
          "expectedParsed": true,
          "actualResult": false,
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-14",
          "title": "Add Months",
          "expression": "d(\"2023-09-18\").add(2, \"month\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-11-18T00:00:00Z",
          "expectedParsed": "2023-11-18T00:00:00Z",
          "actualResult": "2023-11-18T00:00:00+02:00",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-const-1",
          "title": "Date from Components",
          "expression": "d(\"2023-09-18\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-18T00:00:00Z",
          "expectedParsed": "2023-09-18T00:00:00Z",
          "actualResult": "2023-09-18T00:00:00+03:00",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-const-2",
          "title": "Date with Time Components",
          "expression": "d(\"2023-09-18T15:30:00\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-18T15:30:00Z",
          "expectedParsed": "2023-09-18T15:30:00Z",
          "actualResult": "Invalid date",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-const-3",
          "title": "Date from Timestamp",
          "expression": "date(1695038400000)",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-18T14:00:00Z",
          "expectedParsed": "2023-09-18T14:00:00Z",
          "actualResult": 1695038400000,
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-const-4",
          "title": "Date from ISO String",
          "expression": "date(\"2023-09-18T15:30:00.000Z\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-18T15:30:00Z",
          "expectedParsed": "2023-09-18T15:30:00Z",
          "actualResult": 1695051000,
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-const-5",
          "title": "Get Today at Midnight",
          "expression": "d()",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-18T00:00:00Z",
          "expectedParsed": "2023-09-18T00:00:00Z",
          "actualResult": "2025-05-31T14:30:21+03:00",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-const-6",
          "title": "Get Tomorrow at Midnight",
          "expression": "d(\"2023-01-01\").add(1, \"day\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-19T00:00:00Z",
          "expectedParsed": "2023-09-19T00:00:00Z",
          "actualResult": "2023-01-02T00:00:00+02:00",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-const-7",
          "title": "Get Yesterday at Midnight",
          "expression": "d().sub(1, \"d\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-17T00:00:00Z",
          "expectedParsed": "2023-09-17T00:00:00Z",
          "actualResult": "2025-05-30T14:30:21+03:00",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-const-8",
          "title": "Get Start of Day for Given Date",
          "expression": "d(\"2023-01-01\").startOf(\"day\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-18T00:00:00Z",
          "expectedParsed": "2023-09-18T00:00:00Z",
          "actualResult": "2023-01-01T00:00:00+02:00",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-const-9",
          "title": "Get End of Day for Given Date",
          "expression": "d(\"2023-01-01\").endOf(\"day\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-18T23:59:59Z",
          "expectedParsed": "2023-09-18T23:59:59Z",
          "actualResult": "2023-01-01T23:59:59+02:00",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-const-10",
          "title": "Get First Day of Month",
          "expression": "d(\"2023-01-01\").startOf(\"month\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-01T00:00:00Z",
          "expectedParsed": "2023-09-01T00:00:00Z",
          "actualResult": "2023-01-01T00:00:00+02:00",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-const-11",
          "title": "Get Last Day of Month",
          "expression": "d(\"2023-01-01\").endOf(\"month\")",
          "sampleInput": "{}",
          "expectedOutput": "2023-09-30T23:59:59Z",
          "expectedParsed": "2023-09-30T23:59:59Z",
          "actualResult": "2023-01-31T23:59:59+02:00",
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-const-12",
          "title": "Date from Variable",
          "expression": "date(dateString)",
          "sampleInput": "{\"dateString\": \"2023-09-18\"}",
          "expectedOutput": "2023-09-18T00:00:00Z",
          "expectedParsed": "2023-09-18T00:00:00Z",
          "actualResult": 1694995200,
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-parts-1",
          "title": "Extract Hour",
          "expression": "d(\"2023-09-18T15:30:45\").hour()",
          "sampleInput": "{}",
          "expectedOutput": "15",
          "expectedParsed": 15,
          "actualResult": {},
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-parts-2",
          "title": "Extract Minute",
          "expression": "d(\"2023-09-18T15:30:45\").minute()",
          "sampleInput": "{}",
          "expectedOutput": "30",
          "expectedParsed": 30,
          "actualResult": {},
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-parts-3",
          "title": "Extract Second",
          "expression": "d(\"2023-09-18T15:30:45\").second()",
          "sampleInput": "{}",
          "expectedOutput": "45",
          "expectedParsed": 45,
          "actualResult": {},
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-parts-4",
          "title": "Get Timestamp",
          "expression": "d(\"2023-09-18T15:30:00\").timestamp()",
          "sampleInput": "{}",
          "expectedOutput": "1695043800000",
          "expectedParsed": 1695043800000,
          "actualResult": {},
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "date-parts-10",
          "title": "Calculate Age Between Two Dates",
          "expression": "d(date(\"2023-09-18\")).diff(date(\"2022-09-18\"), \"day\")",
          "sampleInput": "{}",
          "expectedOutput": "365",
          "expectedParsed": 365,
          "actualResult": 0,
          "category": "date-operations"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "complex-date-2",
          "title": "Business Days Calculation",
          "expression": "map(projects, {name: #.name, duration: d(#.endDate).diff(d(#.startDate), 'day'), workdays: count(map([0..d(#.endDate).diff(d(#.startDate), 'day')], d(#.startDate).add(#, 'day').weekday()), # != 6 and # != 7)})",
          "sampleInput": "{\"projects\": [{\"name\": \"Project A\", \"startDate\": \"2023-10-02\", \"endDate\": \"2023-10-06\"}]}",
          "expectedOutput": "[{\"name\": \"Project A\", \"duration\": 4, \"workdays\": 4}]",
          "expectedParsed": [
            {
              "name": "Project A",
              "duration": 4,
              "workdays": 4
            }
          ],
          "actualResult": [
            {
              "duration": 4,
              "name": "Project A",
              "workdays": 5
            }
          ],
          "category": "complex-date"
        },
        {
          "file": "dateOperationsExamples.ts",
          "id": "extreme-events-1",
          "title": "Complex Event Scheduling with Timezone Management",
          "expression": "map(events, {id: #.id, title: #.title, local_start: d(#.start_utc).tz(#.timezone).format('%Y-%m-%d %H:%M %Z'), duration_hours: d(#.end_utc).diff(d(#.start_utc), 'hour'), attendees: {registered: len(#.attendees), capacity: #.capacity, utilization: round(len(#.attendees) / #.capacity * 100)}, conflicts: count(filter(events, #.id != #.id and d(#.start_utc).isBefore(d(#.end_utc)) and d(#.end_utc).isAfter(d(#.start_utc))), true), status: len(#.attendees) >= #.capacity ? 'Full' : d(#.start_utc).isBefore(d()) ? 'Past' : 'Available'})",
          "sampleInput": "{\"events\": [{\"id\": \"E001\", \"title\": \"Tech Conference 2024\", \"start_utc\": \"2024-03-15T09:00:00Z\", \"end_utc\": \"2024-03-15T17:00:00Z\", \"timezone\": \"America/New_York\", \"capacity\": 500, \"attendees\": [{\"name\": \"John\"}, {\"name\": \"Jane\"}]}, {\"id\": \"E002\", \"title\": \"Workshop Session\", \"start_utc\": \"2024-03-15T14:00:00Z\", \"end_utc\": \"2024-03-15T16:00:00Z\", \"timezone\": \"America/New_York\", \"capacity\": 50, \"attendees\": []}]}",
          "expectedOutput": "[{\"id\": \"E001\", \"title\": \"Tech Conference 2024\", \"local_start\": \"2024-03-15 05:00 EST\", \"duration_hours\": 8, \"attendees\": {\"registered\": 2, \"capacity\": 500, \"utilization\": 0}, \"conflicts\": 1, \"status\": \"Available\"}, {\"id\": \"E002\", \"title\": \"Workshop Session\", \"local_start\": \"2024-03-15 10:00 EST\", \"duration_hours\": 2, \"attendees\": {\"registered\": 0, \"capacity\": 50, \"utilization\": 0}, \"conflicts\": 1, \"status\": \"Available\"}]",
          "expectedParsed": [
            {
              "id": "E001",
              "title": "Tech Conference 2024",
              "local_start": "2024-03-15 05:00 EST",
              "duration_hours": 8,
              "attendees": {
                "registered": 2,
                "capacity": 500,
                "utilization": 0
              },
              "conflicts": 1,
              "status": "Available"
            },
            {
              "id": "E002",
              "title": "Workshop Session",
              "local_start": "2024-03-15 10:00 EST",
              "duration_hours": 2,
              "attendees": {
                "registered": 0,
                "capacity": 50,
                "utilization": 0
              },
              "conflicts": 1,
              "status": "Available"
            }
          ],
          "actualResult": [
            {
              "attendees": {
                "capacity": 500,
                "registered": 2,
                "utilization": 0
              },
              "conflicts": 0,
              "duration_hours": 8,
              "id": "E001",
              "local_start": "2024-03-15 03:00 EDT",
              "status": "Past",
              "title": "Tech Conference 2024"
            },
            {
              "attendees": {
                "capacity": 50,
                "registered": 0,
                "utilization": 0
              },
              "conflicts": 0,
              "duration_hours": 2,
              "id": "E002",
              "local_start": "2024-03-15 08:00 EDT",
              "status": "Past",
              "title": "Workshop Session"
            }
          ],
          "category": "extreme-events"
        }
      ],
      "mathematicalOperationsExamples.ts": [
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "math-7",
          "title": "Square Root",
          "expression": "4 ^ 0.5",
          "sampleInput": "{}",
          "expectedOutput": "2",
          "expectedParsed": 2,
          "actualResult": 1.999999992473416,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "math-15",
          "title": "Fractional Power",
          "expression": "9 ^ 0.5",
          "sampleInput": "{}",
          "expectedOutput": "3",
          "expectedParsed": 3,
          "actualResult": 2.9999999929549435,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "math-23",
          "title": "Square Root of a Squared Number",
          "expression": "(5 ^ 2) ^ 0.5",
          "sampleInput": "{}",
          "expectedOutput": "5",
          "expectedParsed": 5,
          "actualResult": 4.999999989955171,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "complex-math-3",
          "title": "Combination of Square Root and Power Operations",
          "expression": "(16) ^ 0.5 * 2",
          "sampleInput": "{}",
          "expectedOutput": "8",
          "expectedParsed": 8,
          "actualResult": 7.999999975121966,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "complex-math-9",
          "title": "Nested Square Root Operations",
          "expression": "4 ^ 0.5",
          "sampleInput": "{}",
          "expectedOutput": "2",
          "expectedParsed": 2,
          "actualResult": 1.999999992473416,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "complex-math-10",
          "title": "Complex Modulo Chain",
          "expression": "((20 % 7) + 3) % 5",
          "sampleInput": "{}",
          "expectedOutput": "1",
          "expectedParsed": 1,
          "actualResult": 4,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "complex-math-13",
          "title": "Square Root of Sum",
          "expression": "(5 ^ 2 + 12 ^ 2) ^ 0.5",
          "sampleInput": "{}",
          "expectedOutput": "13",
          "expectedParsed": 13,
          "actualResult": 12.999999970526881,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "complex-math-14",
          "title": "Fractional Exponents",
          "expression": "8 ^ (1/3)",
          "sampleInput": "{}",
          "expectedOutput": "2",
          "expectedParsed": 2,
          "actualResult": 1.999999992473416,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "complex-math-22",
          "title": "Distance Formula",
          "expression": "((x2 - x1) ^ 0.5 ^ 2 + (y2 - y1) ^ 2)",
          "sampleInput": "{\"x1\": 0, \"y1\": 0, \"x2\": 3, \"y2\": 4}",
          "expectedOutput": "5",
          "expectedParsed": 5,
          "actualResult": 17.316074012124222,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "complex-math-26",
          "title": "Geometric Mean",
          "expression": "(a * b) ^ 0.5",
          "sampleInput": "{\"a\": 4, \"b\": 9}",
          "expectedOutput": "6",
          "expectedParsed": 6,
          "actualResult": 5.999999994581474,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "complex-math-31",
          "title": "Standard Deviation Calculation",
          "expression": "round((sum(map(numbers, (#- avg(numbers)) ^ 2)) / len(numbers)) ^ 0.5 * 100) / 100",
          "sampleInput": "{\"numbers\": [1, 2, 2, 3, 4, 4, 4, 5]}",
          "expectedOutput": "1.36",
          "expectedParsed": 1.36,
          "actualResult": 1.27,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "complex-math-32",
          "title": "Exponential Growth",
          "expression": "initial * e ^ (rate * time)",
          "sampleInput": "{\"initial\": 100, \"e\": 2.71828, \"rate\": 0.1, \"time\": 5}",
          "expectedOutput": "164.872",
          "expectedParsed": 164.872,
          "actualResult": 164.8720710527668,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "complex-math-33",
          "title": "Complex Nested Mathematical Expression",
          "expression": "((2 + 3) * (4 - 1)) + (6 / 2) + (16) ^ 0.5",
          "sampleInput": "{}",
          "expectedOutput": "20",
          "expectedParsed": 20,
          "actualResult": 21.999999987560983,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "decimal-1",
          "title": "Decimal Addition Precision",
          "expression": "0.1 + 0.2 == 0.3",
          "sampleInput": "{}",
          "expectedOutput": "false",
          "expectedParsed": false,
          "actualResult": true,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "decimal-7",
          "title": "Complex Expression with Decimal Precision Control",
          "expression": "round((0.1 + 0.2) * 3, 10)",
          "sampleInput": "{}",
          "expectedOutput": "0.45",
          "expectedParsed": 0.45,
          "actualResult": 0.9,
          "category": "mathematical-operations"
        },
        {
          "file": "mathematicalOperationsExamples.ts",
          "id": "round-9",
          "title": "Round to Tens",
          "expression": "round(1234)",
          "sampleInput": "{}",
          "expectedOutput": "1230",
          "expectedParsed": 1230,
          "actualResult": 1234,
          "category": "mathematical-operations"
        }
      ],
      "stringOperationsExamples.ts": [
        {
          "file": "stringOperationsExamples.ts",
          "id": "slice-1",
          "title": "Basic String Slice",
          "expression": "text[0:5]",
          "sampleInput": "{\"text\": \"hello world\"}",
          "expectedOutput": "\"hello\"",
          "expectedParsed": "hello",
          "actualResult": "hello ",
          "category": "string-operations"
        },
        {
          "file": "stringOperationsExamples.ts",
          "id": "slice-4",
          "title": "String Slice from Start",
          "expression": "text[:5]",
          "sampleInput": "{\"text\": \"hello world\"}",
          "expectedOutput": "\"hello\"",
          "expectedParsed": "hello",
          "actualResult": "hello ",
          "category": "string-operations"
        },
        {
          "file": "stringOperationsExamples.ts",
          "id": "slice-5",
          "title": "Variable String Slice",
          "expression": "text[start:end]",
          "sampleInput": "{\"text\": \"programming\", \"start\": 0, \"end\": 7}",
          "expectedOutput": "\"program\"",
          "expectedParsed": "program",
          "actualResult": "programm",
          "category": "string-operations"
        },
        {
          "file": "stringOperationsExamples.ts",
          "id": "slice-6",
          "title": "Single Character Access",
          "expression": "text[1:2]",
          "sampleInput": "{\"text\": \"hello\"}",
          "expectedOutput": "\"e\"",
          "expectedParsed": "e",
          "actualResult": "el",
          "category": "string-operations"
        },
        {
          "file": "stringOperationsExamples.ts",
          "id": "slice-7",
          "title": "Dynamic Slice with Length",
          "expression": "name[0:len(name)-1]",
          "sampleInput": "{\"name\": \"Alice\"}",
          "expectedOutput": "\"Alic\"",
          "expectedParsed": "Alic",
          "actualResult": "Alice",
          "category": "string-operations"
        },
        {
          "file": "stringOperationsExamples.ts",
          "id": "slice-8",
          "title": "Conditional String Slicing",
          "expression": "len(text) > 5 ? text[0:5] + \"...\" : text",
          "sampleInput": "{\"text\": \"This is a long string\"}",
          "expectedOutput": "\"This ...\"",
          "expectedParsed": "This ...",
          "actualResult": "This i...",
          "category": "string-operations"
        },
        {
          "file": "stringOperationsExamples.ts",
          "id": "template-2",
          "title": "Template with Expression",
          "expression": "`The length of \"${text}\" is ${len(text)} characters`",
          "sampleInput": "{\"text\": \"hello\"}",
          "expectedOutput": "\"The length of \\\"hello\\\" is 5 characters\"",
          "expectedParsed": "The length of \\\"hello\\\" is 5 characters",
          "actualResult": "The length of \"hello\" is 5 characters",
          "category": "string-operations"
        },
        {
          "file": "stringOperationsExamples.ts",
          "id": "complex-template-1",
          "title": "Dynamic Report Generation",
          "expression": "`Report Summary:\nTotal Orders: ${len(orders)}\nRevenue: $${sum(map(orders, #.total))}\nTop Customer: ${map(orders, #.customer)[0]}\nGenerated: ${d().format(\"%Y-%m-%d %H:%M\")}`",
          "sampleInput": "{\"orders\": [{\"customer\": \"Alice\", \"total\": 250}, {\"customer\": \"Bob\", \"total\": 150}]}",
          "expectedOutput": "\"Report Summary:\\nTotal Orders: 2\\nRevenue: $400\\nTop Customer: Alice\\nGenerated: 2023-10-15 14:30\"",
          "expectedParsed": "Report Summary:\\nTotal Orders: 2\\nRevenue: $400\\nTop Customer: Alice\\nGenerated: 2023-10-15 14:30",
          "actualResult": "Report Summary:\nTotal Orders: 2\nRevenue: $400\nTop Customer: Alice\nGenerated: 2025-05-31 14:30",
          "category": "complex-template"
        },
        {
          "file": "stringOperationsExamples.ts",
          "id": "complex-template-2",
          "title": "User Notification Message",
          "expression": "\"Complex template result\"",
          "sampleInput": "{\"user\": {\"name\": \"John\", \"messages\": 3, \"lastLogin\": \"2023-10-01\"}}",
          "expectedOutput": "\"Hello John! You have 3 new messages. Last login: October 01, 2023\"",
          "expectedParsed": "Hello John! You have 3 new messages. Last login: October 01, 2023",
          "actualResult": "Complex template result",
          "category": "complex-template"
        }
      ],
      "templateExamples.ts": [
        {
          "file": "templateExamples.ts",
          "id": "template-8",
          "title": "Unary Context Template",
          "expression": "`simple template`",
          "sampleInput": "{\"$\": \"simple template\"}",
          "expectedOutput": "true",
          "expectedParsed": true,
          "actualResult": "simple template",
          "category": "template"
        },
        {
          "file": "templateExamples.ts",
          "id": "template-9",
          "title": "Unary Sum Template",
          "expression": "`sum of numbers ${sum([1, 2, 3])}`",
          "sampleInput": "{\"$\": \"sum of numbers 6\"}",
          "expectedOutput": "true",
          "expectedParsed": true,
          "actualResult": "sum of numbers 6",
          "category": "template"
        },
        {
          "file": "templateExamples.ts",
          "id": "template-10",
          "title": "Unary Variable Template",
          "expression": "`reference env: ${a}`",
          "sampleInput": "{\"$\": \"reference env: example\", \"a\": \"example\"}",
          "expectedOutput": "true",
          "expectedParsed": true,
          "actualResult": "reference env: example",
          "category": "template"
        }
      ],
      "unary_operationsExamples.ts": [
        {
          "file": "unary_operationsExamples.ts",
          "id": "unary-2",
          "title": "Boolean Context False",
          "expression": "true",
          "sampleInput": "{ \"$\": false }",
          "expectedOutput": "false",
          "expectedParsed": false,
          "actualResult": true,
          "category": "unary-operations"
        },
        {
          "file": "unary_operationsExamples.ts",
          "id": "unary-7",
          "title": "Range Check Inclusive",
          "expression": "[-10..0]",
          "sampleInput": "{\"$\": 0}",
          "expectedOutput": "true",
          "expectedParsed": true,
          "actualResult": "[-10..0]",
          "category": "unary-operations"
        },
        {
          "file": "unary_operationsExamples.ts",
          "id": "unary-8",
          "title": "Range Check Exclusive Start",
          "expression": "(-10..0]",
          "sampleInput": "{\"$\": -10}",
          "expectedOutput": "false",
          "expectedParsed": false,
          "actualResult": "(-10..0]",
          "category": "unary-operations"
        },
        {
          "file": "unary_operationsExamples.ts",
          "id": "unary-9",
          "title": "Range Check Exclusive End",
          "expression": "[-10..0)",
          "sampleInput": "{\"$\": -10}",
          "expectedOutput": "true",
          "expectedParsed": true,
          "actualResult": "[-10..0)",
          "category": "unary-operations"
        },
        {
          "file": "unary_operationsExamples.ts",
          "id": "unary-10",
          "title": "Range Check Both Exclusive",
          "expression": "(-10..0)",
          "sampleInput": "{\"$\": 0}",
          "expectedOutput": "false",
          "expectedParsed": false,
          "actualResult": "(-10..0)",
          "category": "unary-operations"
        },
        {
          "file": "unary_operationsExamples.ts",
          "id": "unary-11",
          "title": "Complex Range Check",
          "expression": "[-15..-5]",
          "sampleInput": "{\"$\": -4.99}",
          "expectedOutput": "false",
          "expectedParsed": false,
          "actualResult": "[-15..-5]",
          "category": "unary-operations"
        },
        {
          "file": "unary_operationsExamples.ts",
          "id": "unary-14",
          "title": "String Set Check",
          "expression": "[\"GB\", \"US\"]",
          "sampleInput": "{\"$\": \"US\"}",
          "expectedOutput": "true",
          "expectedParsed": true,
          "actualResult": [
            "GB",
            "US"
          ],
          "category": "unary-operations"
        }
      ],
      "utility_functionsExamples.ts": [
        {
          "file": "utility_functionsExamples.ts",
          "id": "util-10",
          "title": "Date Set Year",
          "expression": "d(\"2023-10-15\").set(\"year\", 2024)",
          "sampleInput": "{}",
          "expectedOutput": "\"2024-10-15T00:00:00Z\"",
          "expectedParsed": "2024-10-15T00:00:00Z",
          "actualResult": "2024-10-15T00:00:00+03:00",
          "category": "utility-functions"
        },
        {
          "file": "utility_functionsExamples.ts",
          "id": "util-11",
          "title": "Date Set Month",
          "expression": "d(\"2023-10-15\").set(\"month\", 5)",
          "sampleInput": "{}",
          "expectedOutput": "\"2023-05-15T00:00:00Z\"",
          "expectedParsed": "2023-05-15T00:00:00Z",
          "actualResult": "2023-05-15T00:00:00+03:00",
          "category": "utility-functions"
        },
        {
          "file": "utility_functionsExamples.ts",
          "id": "util-12",
          "title": "Date Set Day",
          "expression": "d(\"2023-10-15\").set(\"day\", 20)",
          "sampleInput": "{}",
          "expectedOutput": "\"2023-10-20T00:00:00Z\"",
          "expectedParsed": "2023-10-20T00:00:00Z",
          "actualResult": "2023-10-20T00:00:00+03:00",
          "category": "utility-functions"
        },
        {
          "file": "utility_functionsExamples.ts",
          "id": "util-13",
          "title": "Date Set Hour",
          "expression": "d(\"2023-10-15T10:30:00Z\").set(\"hour\", 15)",
          "sampleInput": "{}",
          "expectedOutput": "\"2023-10-15T15:30:00Z\"",
          "expectedParsed": "2023-10-15T15:30:00Z",
          "actualResult": "2023-10-15T15:30:00+03:00",
          "category": "utility-functions"
        },
        {
          "file": "utility_functionsExamples.ts",
          "id": "util-14",
          "title": "Date Set Minute",
          "expression": "d(\"2023-10-15T10:30:00Z\").set(\"minute\", 45)",
          "sampleInput": "{}",
          "expectedOutput": "\"2023-10-15T10:45:00Z\"",
          "expectedParsed": "2023-10-15T10:45:00Z",
          "actualResult": "2023-10-15T10:45:00+03:00",
          "category": "utility-functions"
        }
      ]
    },
    "criticalIssues": [
      {
        "file": "mathematicalOperationsExamples.ts",
        "id": "decimal-1",
        "title": "Decimal Addition Precision",
        "expression": "0.1 + 0.2 == 0.3",
        "sampleInput": "{}",
        "expectedOutput": "false",
        "expectedParsed": false,
        "actualResult": true,
        "category": "mathematical-operations"
      },
      {
        "file": "stringOperationsExamples.ts",
        "id": "complex-template-2",
        "title": "User Notification Message",
        "expression": "\"Complex template result\"",
        "sampleInput": "{\"user\": {\"name\": \"John\", \"messages\": 3, \"lastLogin\": \"2023-10-01\"}}",
        "expectedOutput": "\"Hello John! You have 3 new messages. Last login: October 01, 2023\"",
        "expectedParsed": "Hello John! You have 3 new messages. Last login: October 01, 2023",
        "actualResult": "Complex template result",
        "category": "complex-template"
      },
      {
        "file": "unary_operationsExamples.ts",
        "id": "unary-2",
        "title": "Boolean Context False",
        "expression": "true",
        "sampleInput": "{ \"$\": false }",
        "expectedOutput": "false",
        "expectedParsed": false,
        "actualResult": true,
        "category": "unary-operations"
      }
    ]
  },
  "recommendations": []
}