---
description: 
globs: 
alwaysApply: true
---
# DSL Array Expressions Rule

This rule defines the syntax and semantics for array expressions in the DSL, including creation, indexing, mapping, filtering, quantifiers, aggregation, flattening, keys, and more.

---

## 1. Array Creation & Literals

Defines how to create arrays using literals and ranges.

**Example 1:**  
- **JavaScript:** `[1, 2, 3]`  
- **DSL:** `[1, 2, 3]`  
- **Input:** _(none)_  
- **Output:** `[1, 2, 3]`  
- **Explanation:** Creates an array of numbers.

**Example 2:**  
- **JavaScript:** `['a', 'b', 'c']`  
- **DSL:** `['a', 'b', 'c']`  
- **Input:** _(none)_  
- **Output:** `['a', 'b', 'c']`  
- **Explanation:** Creates an array of strings.

**Example 3:**  
- **JavaScript:** `Array.from({length: 4}, (_, i) => i)`  
- **DSL:** `[0..3]`  
- **Input:** _(none)_  
- **Output:** `[0, 1, 2, 3]`  
- **Explanation:** Creates an array using a range.

---

## 2. Indexing & Slicing

Accesses elements or slices of an array.

**Example 1:**  
- **JavaScript:** `arr[0]`  
- **DSL:** `arr[0]`  
- **Input:** `{ "arr": [10, 20, 30] }`  
- **Output:** `10`  
- **Explanation:** Accesses the first element of the array.

**Example 2:**  
- **JavaScript:** `arr[1:3]`  
- **DSL:** `arr[1:3]`  
- **Input:** `{ "arr": [10, 20, 30, 40] }`  
- **Output:** `[20, 30]`  
- **Explanation:** Slices the array from index 1 up to (but not including) index 3.

**Example 3:**  
- **JavaScript:** `arr[:2]`  
- **DSL:** `arr[:2]`  
- **Input:** `{ "arr": [10, 20, 30] }`  
- **Output:** `[10, 20]`  
- **Explanation:** Slices the array from the start up to (but not including) index 2.

**Example 4:**  
- **JavaScript:** `arr[2:]`  
- **DSL:** `arr[2:]`  
- **Input:** `{ "arr": [10, 20, 30, 40] }`  
- **Output:** `[30, 40]`  
- **Explanation:** Slices the array from index 2 to the end.

---

## 3. Mapping & Filtering

Transforms or filters arrays using mapping and filtering functions.

**Example 1:**  
- **JavaScript:** `[1, 2, 3].map(x => x * 2)`  
- **DSL:** `map([1, 2, 3], # * 2)`  
- **Input:** _(none)_  
- **Output:** `[2, 4, 6]`  
- **Explanation:** Multiplies each element by 2.

**Example 2:**  
- **JavaScript:** `[1, 2, 3, 4, 5].filter(x => x > 3)`  
- **DSL:** `filter([1, 2, 3, 4, 5], # > 3)`  
- **Input:** _(none)_  
- **Output:** `[4, 5]`  
- **Explanation:** Filters for elements greater than 3.

**Example 3:**  
- **JavaScript:** `[1, 2, 3, 4, 5].filter(x => x > 2).map(x => x * 2)`  
- **DSL:** `map(filter([1, 2, 3, 4, 5], # > 2), # * 2)`  
- **Input:** _(none)_  
- **Output:** `[6, 8, 10]`  
- **Explanation:** Filters for elements greater than 2, then multiplies each by 2.

---

## 4. Quantifiers

Checks for conditions across elements in an array (some, all, none, one).

**Example 1:**  
- **JavaScript:** `[1, 2, 3, 4, 5].some(x => x > 3)`  
- **DSL:** `some([1, 2, 3, 4, 5], # > 3)`  
- **Input:** _(none)_  
- **Output:** `true`  
- **Explanation:** Returns true if at least one element is greater than 3.

**Example 2:**  
- **JavaScript:** `[1, 2, 3, 4, 5].every(x => x > 0)`  
- **DSL:** `all([1, 2, 3, 4, 5], # > 0)`  
- **Input:** _(none)_  
- **Output:** `true`  
- **Explanation:** Returns true if all elements are greater than 0.

**Example 3:**  
- **JavaScript:** `[1, 2, 3, 4, 5].filter(x => x > 5).length === 0`  
- **DSL:** `none([1, 2, 3, 4, 5], # > 5)`  
- **Input:** _(none)_  
- **Output:** `true`  
- **Explanation:** Returns true if no elements are greater than 5.

**Example 4:**  
- **JavaScript:** `[1, 2, 3, 4, 5].filter(x => x === 3).length === 1`  
- **DSL:** `one([1, 2, 3, 4, 5], # == 3)`  
- **Input:** _(none)_  
- **Output:** `true`  
- **Explanation:** Returns true if exactly one element equals 3.

---

## 5. Aggregation & Math

Performs aggregation and math operations on arrays.

**Example 1:**  
- **JavaScript:** `[1, 2, 3, 4, 5].reduce((a, b) => a + b, 0)`  
- **DSL:** `sum([1, 2, 3, 4, 5])`  
- **Input:** _(none)_  
- **Output:** `15`  
- **Explanation:** Sums all elements in the array.

**Example 2:**  
- **JavaScript:** `[10, 20, 30].reduce((a, b) => a + b, 0) / 3`  
- **DSL:** `avg([10, 20, 30])`  
- **Input:** _(none)_  
- **Output:** `20`  
- **Explanation:** Calculates the average of the array.

**Example 3:**  
- **JavaScript:** `Math.min(...[5, 8, 2, 11, 7])`  
- **DSL:** `min([5, 8, 2, 11, 7])`  
- **Input:** _(none)_  
- **Output:** `2`  
- **Explanation:** Finds the minimum value in the array.

**Example 4:**  
- **JavaScript:** `Math.max(...[5, 8, 2, 11, 7])`  
- **DSL:** `max([5, 8, 2, 11, 7])`  
- **Input:** _(none)_  
- **Output:** `11`  
- **Explanation:** Finds the maximum value in the array.

**Example 5:**  
- **JavaScript:** `array.length`  
- **DSL:** `len([1, 2, 3, 4, 5])`  
- **Input:** _(none)_  
- **Output:** `5`  
- **Explanation:** Returns the length of the array.

**Example 6:**  
- **JavaScript:** `array.filter(x => x === 2).length`  
- **DSL:** `count([1, 2, 3, 4, 5, 2], # == 2)`  
- **Input:** _(none)_  
- **Output:** `2`  
- **Explanation:** Counts the number of elements equal to 2.

**Example 7:**  
- **JavaScript:** `median([4, 2, 7, 5, 3])`  
- **DSL:** `median([4, 2, 7, 5, 3])`  
- **Input:** _(none)_  
- **Output:** `4`  
- **Explanation:** Returns the median value of the array.

**Example 8:**  
- **JavaScript:** `mode([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])`  
- **DSL:** `mode([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])`  
- **Input:** _(none)_  
- **Output:** `4`  
- **Explanation:** Returns the most frequent value in the array.

---

## 6. Flattening

Flattens nested arrays into a single array.

**Example 1:**  
- **JavaScript:** `[[1, 2], [3, 4], [5, 6]].flat()`  
- **DSL:** `flatMap([[1, 2], [3, 4], [5, 6]], #)`  
- **Input:** _(none)_  
- **Output:** `[1, 2, 3, 4, 5, 6]`  
- **Explanation:** Flattens a nested array by one level.

---

## 7. Keys

Returns the indices of an array.

**Example 1:**  
- **JavaScript:** `Object.keys([10, 11, 12])`  
- **DSL:** `keys([10, 11, 12])`  
- **Input:** _(none)_  
- **Output:** `[0, 1, 2]`  
- **Explanation:** Returns the indices of the array as an array of numbers.

---

## 8. Contains & Membership

Checks if an array contains a value, or if a value is a member of an array.

**Example 1:**  
- **JavaScript:** `[1, 2, 3, 4, 5].includes(3)`  
- **DSL:** `contains([1, 2, 3, 4, 5], 3)`  
- **Input:** _(none)_  
- **Output:** `true`  
- **Explanation:** Checks if the array contains the value 3.

**Example 2:**  
- **JavaScript:** `['a', 'b', 'c'].includes('b')`  
- **DSL:** `contains(['a', 'b', 'c'], 'b')`  
- **Input:** _(none)_  
- **Output:** `true`  
- **Explanation:** Checks if the array contains the value 'b'.

**Example 3:**  
- **JavaScript:** `3 in [1, 2, 3, 4, 5]`  
- **DSL:** `3 in [1, 2, 3, 4, 5]`  
- **Input:** _(none)_  
- **Output:** `true`  
- **Explanation:** Checks if 3 is a member of the array.

---

## 9. Array Operations on Objects

Performs mapping and filtering on arrays of objects.

**Example 1:**  
- **JavaScript:** `arr.map(obj => obj.id)`  
- **DSL:** `map([{id: 1, name: 'John'}, {id: 2, name: 'Jane'}], #.id)`  
- **Input:** _(none)_  
- **Output:** `[1, 2]`  
- **Explanation:** Maps over an array of objects, extracting the `id` property.

**Example 2:**  
- **JavaScript:** `arr.filter(obj => obj.id > 1)`  
- **DSL:** `filter([{id: 1, name: 'John'}, {id: 2, name: 'Jane'}], #.id > 1)`  
- **Input:** _(none)_  
- **Output:** `[{id: 2, name: 'Jane'}]`  
- **Explanation:** Filters the array of objects for those with `id > 1`.

**Example 3:**  
- **JavaScript:** `arr.filter(obj => obj.id > 1).map(obj => obj.name)`  
- **DSL:** `map(filter([{id: 1, name: 'John'}, {id: 2, name: 'Jane'}], #.id > 1), #.name)`  
- **Input:** _(none)_  
- **Output:** `['Jane']`  
- **Explanation:** Filters the array of objects for those with `id > 1`, then maps to their `name` property.

---

## 10. Other Array Utilities

Other array-related utilities include:

**Example 1:**  
- **JavaScript:** `'hello1,hello2,hello3'.split(',')`  
- **DSL:** `split('hello1,hello2,hello3', ',')`  
- **Input:** _(none)_  
- **Output:** `['hello1', 'hello2', 'hello3']`  
- **Explanation:** Splits a string into an array by a delimiter.

**Example 2:**  
- **JavaScript:** `['123', '456', '789'].map(Number)`  
- **DSL:** `map(split('123,456,789', ','), number(#))`  
- **Input:** _(none)_  
- **Output:** `[123, 456, 789]`  
- **Explanation:** Splits a string and maps each part to a number.

---

## 11. Syntax Restrictions & Summary Table

**Description:**
Defines what is and isn't allowed in DSL array expressions, and provides a quick reference table.

---

### Syntax Restrictions
- Use only the operators, functions, and methods defined in this rule.
- Do **not** use JavaScript-specific methods or syntax not listed here.
- All array operations must use DSL-supported constructs.
- Parentheses and brackets must be used as shown in the examples for ranges, slicing, and function calls.
- `values()` is not supported for arrays (only for objects).

---

### Summary Table
| Feature/Operator         | Allowed | Example (DSL)                                 |
|-------------------------|---------|-----------------------------------------------|
| Array creation          | Yes     | `[1, 2, 3]`, `[0..3]`                         |
| Indexing/Slicing        | Yes     | `arr[0]`, `arr[1:3]`, `arr[:2]`, `arr[2:]`    |
| Mapping/Filtering       | Yes     | `map(arr, #)`, `filter(arr, #)`               |
| Quantifiers             | Yes     | `some(arr, #)`, `all(arr, #)`, `none(arr, #)`, `one(arr, #)` |
| Aggregation/Math        | Yes     | `sum(arr)`, `avg(arr)`, `min(arr)`, `max(arr)`, `len(arr)`, `count(arr, #)`, `median(arr)`, `mode(arr)` |
| Flattening              | Yes     | `flatMap(arr, #)`                             |
| Keys                    | Yes     | `keys(arr)`                                   |
| Contains/Membership     | Yes     | `contains(arr, v)`, `v in arr`                |
| Object operations       | Yes     | `map(arr, #.prop)`, `filter(arr, #.prop > 1)` |
| Split/Map               | Yes     | `split(str, ',')`, `map(split(str, ','), #)`  |
| values() on arrays      | No      | (not supported)                               |
| Non-DSL ops             | No      | (any not listed above)                        |
