---
description: 
globs: 
alwaysApply: true
---
# Market Extraction Rule for Arbitrary JSON

## Purpose
Given any input JSON (which may vary in structure between providers), your task is to extract and generate an output JSON containing an array of Market objects, following the schema and field logic described below.  
You must use reasoning, field name association, and value matching to map the input data to the required output structure.

---

## Field Guidance and Examples

### Market Object Structure

- **Name**: The market's name, representing the market type or label.
  - **Type:** string
  - **What to look for:** Field names like `name`, `displayName`, `marketType`, `label`, etc.
  - **Examples of values:**
    - "Asian Handicap", "1x2", "match result", "to win", "12", "correct score", "double chance", "odd/even", "under/over", "full time result"
    - May include suffixes/prefixes for period: "1st half", "2nd half", "1st set", "2nd period", etc.

- **Condition**: DSL expression to select this market among all others.
  - **Type:** string (DSL expression)
  - **What to look for:** Expressions referencing the actual field in the input JSON that identifies the market.
  - **Examples of expressions:**
    - `name == "1x2"`
    - `contains(marketType, "Over/Under")`
    - `startsWith(name, "Total Sets")`
    - `name == "HHA" and period == "1st Half"`
  - **Best Practice:**
    - Do **not** invent loop variables like `m` or `b`. Reference fields directly as they appear at the market level.

- **Bets**: Array of Bet objects, each representing a possible outcome or selection within the market.
  - **Type:** array
  - **What to look for:** Field names like `bets`, `selections`, `options`, `outcomes`, etc.
  - **Best Practice:**
    - If the input field is an array, use `map(arrayField, {...})` and `#` to reference the current item.

#### Bet Object Structure

- **Name**: The bet's name, as displayed in the input data.
  - **Type:** string
  - **What to look for:** Field names like `name`, `label`, `betName`, `selectionName`, etc.
  - **Examples of values:**
    - "home", "away", "1", "2", "x", "tie", "draw", team names, "yes", "no", "odd", "even", "over", "under", scorelines like "4:4", "3-2", "1-0", "no goal", combinations like "1/2/x and/or under/over"
  - **Best Practice:**
    - When mapping over an array, use `#` to refer to the current item.

- **Line**: The line or sub-name of the bet/market, often representing a threshold or value.
  - **Type:** string
  - **What to look for:** Field names like `line`, `handicap`, `total`, `value`, or values embedded in the bet/market name.
  - **Examples of values:**
    - "1.5", "2.5", "1.25", "1", "2", "-1", "-2", "-3", "-4.5", ".5", "3", "3.0", "30.5", "0:1", "1:2", "-1:0", "0:-2", "1/2/3", "1/2", "1/7", "+7.5", "+5"
    - If the line is in the name, extract it; if not found, set as "".
  - **Best Practice:**
    - Use nullish coalescing (`?? ""`) or ternary (`!= null ? ... : ""`) for fallback if the field is optional.

- **Price**: The price or odds for the bet.
  - **Type:** double (may be string in input)
  - **What to look for:** Field names like `price`, `odds`, `oddsType`, `p`, `priceOdd`, `oddsValue`, `decimal`, etc.
  - **Examples of values:**
    - 1.85, 2.5, "1.2", 4.6, "7", 7.0, 15, 1.01

- **Status**: The status of the bet (1 = Open, 2 = Close).
  - **Type:** integer (output), various types in input
  - **What to look for:** Field names like `status`, `statusValue`, `stat`, `visibility`, `s`, etc.
  - **Examples of input values:**
    - 'AVAILABLE', 'Suspended', 'Open', 'CLOSED', 0, 1
  - **How to convert:**
    - Use a DSL expression to map input to output, e.g.:
      - `#.status == 'AVAILABLE' ? 1 : 2`
      - `#.visibility == 'Visible' ? 1 : 2`
      - `#.status == 'OPEN' ? 1 : 2`
      - `#.stat == 1 ? 1 : 2`

---

## Output Schema

```json
{
  "Markets": [
    {
      "Condition": "[string]", // DSL expression to identify/select this market (must reference input JSON fields)
      "Name": "[string]",      // DSL expression for the market's name
      "Bets": map([array], {    // Use map and # for bets/selections
        "Name": "#.name",      // DSL expression for the bet's name
        "Line": "#.line ?? \"\"", // DSL expression for the bet's line/sub-name, with fallback
        "Price": "#.price",    // DSL expression for the bet's price
        "Status": "#.status == 'OPEN' ? 1 : 2" // DSL expression for the bet's status (1=Open, 2=Close)
      })
    }
  ]
}
```

---

## Best Practices for DSL Output

- **At the Market Level:**
  - Reference fields directly (e.g., `name`, `displayName`, `marketType`).
  - Do **not** invent loop variables like `m` or `b`.

- **For Bets/Selections:**
  - If the input field is an array (e.g., `selections`, `bets`, `options`), use:
    ```json
    "Bets": map(selections, {
      Name: #.name.cleanName,
      Line: #.points.formattedPoints ?? "",
      Price: number(#.odds.numerator/#.odds.denominator) + 1,
      Status: #.status == 'OPEN' ? 1 : 2
    })
    ```
  - Use `#` to reference the current item in the array.

- **Condition Field:**
  - Reference the market-level field directly, e.g., `"Condition": "name == \"Match Winner\""`.

- **Fallbacks:**
  - Use `?? ""` or `!= null ? ... : ""` for optional fields.

---

## Example Output (Generic, Not Input-Specific):

```json
{
  "Condition": "name == \"Correct Score\"",
  "Name": "name",
  "Bets": map(selections, {
    Name: #.name.cleanName,
    Line: #.points.formattedPoints ?? "",
    Price: number(#.odds.numerator/#.odds.denominator) + 1,
    Status: #.status == 'OPEN' ? 1 : 2
  })
}
```

---

## Summary Table: How to Reference Fields in DSL

| Context         | How to Reference in DSL         | Example                                 |
|-----------------|--------------------------------|-----------------------------------------|
| Market field    | Direct field name              | `name`, `displayName`, `marketType`     |
| Bet/Selection   | `map(array, {...})` and `#`    | `map(selections, {Name: #.name})`       |
| Optional field  | Nullish/ternary fallback       | `#.line ?? ""`, `#.line != null ? #.line : ""` |

---

## Rule Update Summary

- **Do not use invented variables like `m` or `b` in DSL expressions.**
- **Reference fields directly at the market level.**
- **Use `map(array, {...})` and `#` for bets/selections.**
- **Handle optional fields with nullish coalescing or ternary.**
- **Always reference actual field names from the input.**

---

## Market Grouping and Handling Analysis Requirement
Before extracting markets from the input JSON, you must first analyze the structure of the input data. Carefully examine the array of market objects and identify the different types of markets present, paying close attention to their name, type, and the structure of their selections/bets.
For each market type or name, note any differences in keys, value formats, or nested fields that may require distinct handling or mapping logic in the DSL extraction process.
After this analysis, group the markets into categories based on their required extraction logic. For each group, describe:
The distinguishing features of the markets in the group (e.g., specific field names, presence/absence of certain keys, value patterns).
The appropriate DSL extraction pattern for that group, referencing the relevant fields and handling any special cases (such as optional fields, nested objects, or different price/line representations).
This grouping and analysis step is mandatory before generating the final DSL extraction output.
The goal is to ensure that all market types are handled correctly and efficiently, with clear reasoning for any differences in extraction logic.

---

**If you need further clarification or encounter any uncertainty, ask the user for more information before proceeding.** 
