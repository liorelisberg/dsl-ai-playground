---
description: 
globs: 
alwaysApply: true
---
# DSL Date Expressions Rule

This rule defines the syntax and semantics for date and time expressions in the DSL, including parsing, formatting, arithmetic, extraction, comparison, ranges, and more.

---

## 1. Date Parsing and Construction

Defines how to create date objects from strings, with or without time zones.

**Example 1:**  
- **JavaScript:** `new Date("2023-09-18T12:00:00Z")`  
- **DSL:** `date("2023-09-18T12:00:00Z")`  
- **Input:** _(none)_  
- **Output:** `1695038400`  
- **Explanation:** Parses an ISO date string into a Unix timestamp.

**Example 2:**  
- **JavaScript:** `new Date("2023-10-15")`  
- **DSL:** `d('2023-10-15')`  
- **Input:** _(none)_  
- **Output:** `'2023-10-15T00:00:00Z'`  
- **Explanation:** Parses a date string into a date object.

**Example 3:**  
- **JavaScript:** `new Date("2023-10-15T00:00:00Z").toLocaleString("en-US", { timeZone: "Europe/Berlin" })`  
- **DSL:** `d('2023-10-15', 'Europe/Berlin')`  
- **Input:** _(none)_  
- **Output:** `'2023-10-15T00:00:00+02:00'`  
- **Explanation:** Parses a date string in a specific time zone.

---

## 2. Date Formatting

Covers converting date objects to formatted strings.

**Example 1:**  
- **JavaScript:** `date.toISOString()`  
- **DSL:** `dateString(date('2023-10-15'))`  
- **Input:** _(none)_  
- **Output:** `'2023-10-15 00:00:00'`  
- **Explanation:** Converts a date to a formatted string.

**Example 2:**  
- **JavaScript:** `date.toLocaleString("en-US", { timeZone: "Europe/Berlin" })`  
- **DSL:** `dateString(d('2023-10-15', 'Europe/Berlin'))`  
- **Input:** _(none)_  
- **Output:** `'2023-10-15 00:00:00+02:00'`  
- **Explanation:** Converts a date with time zone to a formatted string.

**Example 3:**  
- **JavaScript:** `date.format('%Y-%m-%d')`  
- **DSL:** `d('2023-10-15').format('%Y-%m-%d')`  
- **Input:** _(none)_  
- **Output:** `'2023-10-15'`  
- **Explanation:** Formats the date according to a custom string pattern.

---

## 3. Durations and Arithmetic

Describes how to add or subtract durations to/from dates.

**Example 1:**  
- **JavaScript:** `new Date("2023-10-15").getTime() + 24*60*60*1000`  
- **DSL:** `date('2023-10-15') + duration('1d')`  
- **Input:** _(none)_  
- **Output:** `1697414400`  
- **Explanation:** Adds a duration of one day to a date and returns the resulting timestamp.

**Example 2:**  
- **JavaScript:** `date.add('1d 5h')`  
- **DSL:** `d('2023-10-15').add('1d 5h')`  
- **Input:** _(none)_  
- **Output:** `'2023-10-16T05:00:00Z'`  
- **Explanation:** Adds a complex duration to a date.

**Example 3:**  
- **JavaScript:** `date.subtract('2d')`  
- **DSL:** `d('2023-10-15').sub('2d')`  
- **Input:** _(none)_  
- **Output:** `'2023-10-13T00:00:00Z'`  
- **Explanation:** Subtracts a duration from a date.

---

## 4. Date Extraction

Extracts specific parts of a date, such as year, month, day, week, quarter, hour, minute, second, and more.

**Example 1:**  
- **JavaScript:** `date.getFullYear()`  
- **DSL:** `year(date('2023-10-15'))`  
- **Input:** _(none)_  
- **Output:** `2023`  
- **Explanation:** Extracts the year from a date.

**Example 2:**  
- **JavaScript:** `date.getMonth() + 1`  
- **DSL:** `monthOfYear(date('2023-10-15'))`  
- **Input:** _(none)_  
- **Output:** `10`  
- **Explanation:** Extracts the month (1–12) from a date.

**Example 3:**  
- **JavaScript:** `date.getDate()`  
- **DSL:** `dayOfMonth(date('2023-10-15'))`  
- **Input:** _(none)_  
- **Output:** `15`  
- **Explanation:** Extracts the day of the month from a date.

**Example 4:**  
- **JavaScript:** `date.getDay()`  
- **DSL:** `dayOfWeek(date('2023-10-15'))`  
- **Input:** _(none)_  
- **Output:** `7`  
- **Explanation:** Returns the ISO weekday number (1=Monday, 7=Sunday).

**Example 5:**  
- **JavaScript:** `getWeekOfYear(date)`  
- **DSL:** `weekOfYear(date('2023-10-15'))`  
- **Input:** _(none)_  
- **Output:** `41`  
- **Explanation:** Extracts the week number of the year from a date.

**Example 6:**  
- **JavaScript:** `getDayOfYear(date)`  
- **DSL:** `dayOfYear(date('2023-10-15'))`  
- **Input:** _(none)_  
- **Output:** `288`  
- **Explanation:** Returns the day number within the year.

**Example 7:**  
- **JavaScript:** `getQuarter(date)`  
- **DSL:** `quarter(date('2023-10-15'))`  
- **Input:** _(none)_  
- **Output:** `4`  
- **Explanation:** Returns the quarter (1–4) of the year.

---

## 5. Date Comparison

Compares dates using operators and functions.

**Example 1:**  
- **JavaScript:** `date1 > date2`  
- **DSL:** `date('2023-10-15') > date('2023-10-14')`  
- **Input:** _(none)_  
- **Output:** `true`  
- **Explanation:** Checks if one date is after another.

**Example 2:**  
- **JavaScript:** `date1 < date2`  
- **DSL:** `date('2023-10-15') < date('2023-10-16')`  
- **Input:** _(none)_  
- **Output:** `true`  
- **Explanation:** Checks if one date is before another.

**Example 3:**  
- **JavaScript:** `date1 == date2`  
- **DSL:** `d('2023-10-15') == d('2023-10-15')`  
- **Input:** _(none)_  
- **Output:** `true`  
- **Explanation:** Checks if two dates are equal.

**Example 4:**  
- **JavaScript:** `date1.isBefore(date2)`  
- **DSL:** `d('2023-10-15').isBefore(d('2023-10-16'))`  
- **Input:** _(none)_  
- **Output:** `true`  
- **Explanation:** Checks if one date is before another.

**Example 5:**  
- **JavaScript:** `date1.isAfter(date2)`  
- **DSL:** `d('2023-10-15').isAfter(d('2023-10-14'))`  
- **Input:** _(none)_  
- **Output:** `true`  
- **Explanation:** Checks if one date is after another.

**Example 6:**  
- **JavaScript:** `date1.isSame(date2)`  
- **DSL:** `d('2023-10-15').isSame(d('2023-10-15'))`  
- **Input:** _(none)_  
- **Output:** `true`  
- **Explanation:** Checks if two dates are the same.

**Example 7:**  
- **JavaScript:** `date1.isSameOrBefore(date2)`  
- **DSL:** `d('2023-10-15').isSameOrBefore(d('2023-10-16'))`  
- **Input:** _(none)_  
- **Output:** `true`  
- **Explanation:** Checks if a date is the same or before another.

**Example 8:**  
- **JavaScript:** `date1.isSameOrAfter(date2)`  
- **DSL:** `d('2023-10-15').isSameOrAfter(d('2023-10-14'))`  
- **Input:** _(none)_  
- **Output:** `true`  
- **Explanation:** Checks if a date is the same or after another.

---

## 6. Date Ranges and Membership

Checks if a date is within a range or not in a range.

**Example 1:**  
- **JavaScript:** `date >= start && date <= end`  
- **DSL:** `d('2023-10-15') in [d('2023-10-01')..d('2023-10-31')]`  
- **Input:** _(none)_  
- **Output:** `true`  
- **Explanation:** Checks if a date is within the specified range (inclusive).

**Example 2:**  
- **JavaScript:** `date > start && date < end`  
- **DSL:** `d('2023-10-15') in (d('2023-10-01')..d('2023-10-31'))`  
- **Input:** _(none)_  
- **Output:** `true`  
- **Explanation:** Checks if a date is within the specified range (exclusive).

**Example 3:**  
- **JavaScript:** `!(date >= start && date <= end)`  
- **DSL:** `d('2023-09-30') not in [d('2023-10-01')..d('2023-10-31')]`  
- **Input:** _(none)_  
- **Output:** `true`  
- **Explanation:** Checks if a date is not within the specified range.

---

## 7. Start/End of Period

Returns the start or end of a specified time unit for a date (e.g., day, month, year, week, quarter, hour, minute).

**Example 1:**  
- **JavaScript:** `startOfDay(date)`  
- **DSL:** `startOf('2023-01-01 15:45:01', 'day')`  
- **Input:** _(none)_  
- **Output:** `'2023-01-01 00:00:00'`  
- **Explanation:** Gets the start of the day for a given date.

**Example 2:**  
- **JavaScript:** `endOfDay(date)`  
- **DSL:** `endOf('2023-01-01 15:45:01', 'd')`  
- **Input:** _(none)_  
- **Output:** `'2023-01-01 23:59:59'`  
- **Explanation:** Gets the end of the day for a given date.

**Example 3:**  
- **JavaScript:** `startOfMonth(date)`  
- **DSL:** `startOf('2023-01-04 15:45:01', 'month')`  
- **Input:** _(none)_  
- **Output:** `'2023-01-01 00:00:00'`  
- **Explanation:** Gets the start of the month for a given date.

**Example 4:**  
- **JavaScript:** `endOfMonth(date)`  
- **DSL:** `endOf('2023-01-04 15:45:01', 'M')`  
- **Input:** _(none)_  
- **Output:** `'2023-01-31 23:59:59'`  
- **Explanation:** Gets the end of the month for a given date.

**Example 5:**  
- **JavaScript:** `startOfQuarter(date)`  
- **DSL:** `d('2023-10-15').startOf('quarter')`  
- **Input:** _(none)_  
- **Output:** `'2023-10-01T00:00:00Z'`  
- **Explanation:** Gets the start of the quarter for a given date.

**Example 6:**  
- **JavaScript:** `endOfQuarter(date)`  
- **DSL:** `d('2023-10-15').endOf('quarter')`  
- **Input:** _(none)_  
- **Output:** `'2023-12-31T23:59:59Z'`  
- **Explanation:** Gets the end of the quarter for a given date.

---

## 8. Leap Year and Validation

Checks if a date is in a leap year, if a date is valid, or if it is today.

**Example 1:**  
- **JavaScript:** `isLeapYear(date)`  
- **DSL:** `d('2024-10-15').isLeapYear()`  
- **Input:** _(none)_  
- **Output:** `true`  
- **Explanation:** Checks if the date occurs in a leap year.

**Example 2:**  
- **JavaScript:** `isValidDate(date)`  
- **DSL:** `d('2023-02-30').isValid()`  
- **Input:** _(none)_  
- **Output:** `false`  
- **Explanation:** Checks whether the given input is a valid date.

**Example 3:**  
- **JavaScript:** `isToday(date)`  
- **DSL:** `d('2023-10-15').isToday()`  
- **Input:** _(none)_  
- **Output:** `false`  
- **Explanation:** Checks if the specified date is the current day.

---

## 9. Time Zone Handling

Handles parsing, formatting, and converting dates with time zones.

**Example 1:**  
- **JavaScript:** `new Date("2023-10-15T00:00:00Z").toLocaleString("en-US", { timeZone: "Europe/Berlin" })`  
- **DSL:** `d('2023-10-15T00:00:00Z').tz('Europe/Berlin')`  
- **Input:** _(none)_  
- **Output:** `'2023-10-15T02:00:00+02:00'`  
- **Explanation:** Converts a date to a different time zone.

**Example 2:**  
- **JavaScript:** `date.getTimezoneOffset()`  
- **DSL:** `d('2023-10-15', 'Europe/Berlin').offsetName()`  
- **Input:** _(none)_  
- **Output:** `'Europe/Berlin'`  
- **Explanation:** Returns the name of the time zone offset for the date.

**Example 3:**  
- **JavaScript:** `date.toISOString()`  
- **DSL:** `dateString(d('2023-10-15', 'Europe/Berlin'))`  
- **Input:** _(none)_  
- **Output:** `'2023-10-15 00:00:00+02:00'`  
- **Explanation:** Converts a date with time zone to a formatted string.

---

## 10. Syntax Restrictions and Summary Table

**Description:**  
Defines what is and isn't allowed in DSL date expressions, and provides a quick reference table.

---

### Syntax Restrictions

- Use only the operators, functions, and methods defined in this rule.
- Do **not** use JavaScript-specific methods or syntax not listed here.
- All date and time operations must use DSL-supported constructs.
- Time zone identifiers must be valid and supported by the DSL.
- Parentheses and brackets must be used as shown in the examples for ranges and function calls.

---

### Summary Table

| Feature/Operator         | Allowed | Example (DSL)                                 |
|-------------------------|---------|-----------------------------------------------|
| Date parsing            | Yes     | `date('2023-10-15')`, `d('2023-10-15')`      |
| Formatting              | Yes     | `dateString(date('...'))`, `.format('%Y-%m-%d')` |
| Arithmetic              | Yes     | `date + duration`, `.add('1d')`, `.sub('2d')` |
| Extraction              | Yes     | `year(date)`, `monthOfYear(date)`, `quarter()`|
| Comparison              | Yes     | `date1 > date2`, `.isBefore(date2)`           |
| Ranges/Membership       | Yes     | `date in [start..end]`, `not in [start..end]` |
| Start/End of period     | Yes     | `startOf(date, 'month')`, `endOf(date, 'y')`  |
| Leap year/Validation    | Yes     | `.isLeapYear()`, `.isValid()`, `.isToday()`   |
| Time zone handling      | Yes     | `.tz('Europe/Berlin')`, `.offsetName()`       |
| Non-DSL ops             | No      | (any not listed above)                        |
