---
description: 
globs: 
alwaysApply: true
---
# DSL Number Expressions Rule

This project uses a JavaScript-like DSL that supports numeric expressions, including arithmetic operations, comparisons, and built-in math functions. All expressions must preserve structure and semantics using DSL-compatible syntax.

---

## 1. Equality and Inequality (`==`, `!=`)

Examples:
- JavaScript: 1 == 1  
  Input: none  
  DSL: 1 == 1  
  Explanation: Direct equality check — syntax is unchanged.

- JavaScript: 1 != 2  
  Input: none  
  DSL: 1 != 2  
  Explanation: Use `!=` for inequality as in JavaScript.

---

## 2. Comparison Operators (`<`, `<=`, `>`, `>=`)

Examples:
- JavaScript: 1 < 2  
  Input: none  
  DSL: 1 < 2  
  Explanation: Use direct numeric comparison.

- JavaScript: -1 >= 1  
  Input: none  
  DSL: -1 >= 1  
  Explanation: DSL supports signed numbers and standard comparators.

---

## 3. Arithmetic Operations (`+`, `-`, `*`, `/`, `%`, `^`)

Examples: 
- JavaScript: 1 + 2 == 3  
  DSL: 1 + 2 == 3  
  Explanation: Preserve operator precedence and equality.

- JavaScript: -5 * -5 == 25  
  DSL: -5 * -5 == 25  
  Explanation: Negative numbers and multiplication are valid.

- JavaScript: 2 ^ 3 == 8  
  DSL: 2 ^ 3 == 8  
  Explanation: Use `^` for exponentiation.

---

## 4. Grouped Arithmetic (Parentheses)

Examples:
- JavaScript: (3 + 4) * 2  
  DSL: (3 + 4) * 2  
  Explanation: Parentheses change precedence, preserve them as-is.

- JavaScript: (10 - 4) / 2  
  DSL: (10 - 4) / 2  
  Explanation: DSL respects standard mathematical grouping.

---

## 5. Math Functions (`abs`, `sum`, `avg`, `min`, `max`, `floor`, `ceil`, `round`, `median`, `mode`)

Examples:
- JavaScript: abs(-5)  
  DSL: abs(-5)  
  Explanation: `abs()` is a supported function.

- JavaScript: sum([1, 2, 3, 4, 5])  
  DSL: sum([1, 2, 3, 4, 5])  
  Explanation: `sum()` takes an array — array syntax is preserved.

- JavaScript: max([-3, -5]) == -3  
  DSL: max([-3, -5]) == -3  
  Explanation: Use `max()` as a function call and compare with `==`.

---

## 6. Ternary Expressions (`condition ? then : else`)

Examples:
- JavaScript: true ? 10 == 10 : 20 == 30  
  DSL: true ? 10 == 10 : 20 == 30  
  Explanation: Ternary expressions follow the same JS syntax with DSL-appropriate sub-expressions.

- JavaScript: false ? 10 == 10 : 20 == 30  
  DSL: false ? 10 == 10 : 20 == 30  
  Explanation: Use `? :` to evaluate conditional branches.

- JavaScript: true ? 10 == 20 : false ? 30 == 40 : true ? 50 == 60 : 70 == 80  
  DSL: true ? 10 == 20 : false ? 30 == 40 : true ? 50 == 60 : 70 == 80  
  Explanation: DSL supports chained ternary expressions.

---

## 7. Summary

- DSL supports basic math: `+`, `-`, `*`, `/`, `%`, `^`
- Comparators: `==`, `!=`, `<`, `<=`, `>`, `>=`
- Math functions: `abs`, `sum`, `avg`, `min`, `max`, `floor`, `ceil`, `round`, `median`, `mode`, `rand`
- Ternary operators follow the JavaScript-style syntax
- Parentheses affect operator precedence and must be preserved
- Arrays are enclosed in brackets: `[1, 2, 3]`
- Do not wrap expressions in quotes
- Preserve the structure of all expressions for evaluation
