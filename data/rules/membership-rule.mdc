---
description: 
globs: 
alwaysApply: true
---
# DSL Membership Expressions Rule

This rule defines the syntax and semantics for membership expressions in the DSL, including the use of `in` and `not in` operators for checking membership in arrays, ranges, and other collections. All examples and restrictions are validated against the DSL source-of-truth.

---

## 1. Membership Operators

- `in`: Checks if a value is present in an array, range, or collection.
- `not in`: Checks if a value is not present in an array, range, or collection.

---

## 2. Membership with Numbers and Ranges

**Example 1:**
- **JavaScript:** `5 in [1,2,3,4,5,6,7,8,9,10]`
- **DSL:** `5 in [1..10]`
- **Input:** _(none)_
- **Output:** `true`
- **Explanation:** Checks if 5 is within the inclusive range from 1 to 10. Returns true.

**Example 2:**
- **JavaScript:** `5 not in [1,2,3,4,5,6,7,8,9,10)`
- **DSL:** `5 not in [1..10)`
- **Input:** _(none)_
- **Output:** `false`
- **Explanation:** Checks if 5 is outside the half-open range from 1 (inclusive) to 10 (exclusive). Returns false because 5 is included.

**Example 3:**
- **JavaScript:** `-5 in [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1]`
- **DSL:** `-5 in [-10..-1]`
- **Input:** _(none)_
- **Output:** `true`
- **Explanation:** Checks if -5 is within the inclusive range from -10 to -1. Returns true.

---

## 3. Membership with Dates and Ranges

**Example 1:**
- **JavaScript:** `dateInRange('2023-10-15', '2023-10-01', '2023-10-31')`
- **DSL:** `d('2023-10-15') in [d('2023-10-01')..d('2023-10-31')]`
- **Input:** _(none)_
- **Output:** `true`
- **Explanation:** Checks if the date 2023-10-15 is within the inclusive date range from 2023-10-01 to 2023-10-31. Returns true.

**Example 2:**
- **JavaScript:** `dateInRange('2023-09-30', '2023-10-01', '2023-10-31')`
- **DSL:** `d('2023-09-30') in [d('2023-10-01')..d('2023-10-31')]`
- **Input:** _(none)_
- **Output:** `false`
- **Explanation:** Checks if the date 2023-09-30 is within the inclusive date range. Returns false because it is before the lower bound.

**Example 3:**
- **JavaScript:** `dateNotInRange('2023-10-31', '2023-10-01', '2023-10-31')`
- **DSL:** `d('2023-10-31') not in [d('2023-10-01')..d('2023-10-31')]`
- **Input:** _(none)_
- **Output:** `false`
- **Explanation:** Checks if the date 2023-10-31 is outside the inclusive date range. Returns false because it is included.

---

## 4. Membership with Strings and Arrays

**Example 1:**
- **JavaScript:** `['a', 'b', 'c'].includes('b')`
- **DSL:** `'b' in ['a', 'b', 'c']`
- **Input:** _(none)_
- **Output:** `true`
- **Explanation:** Checks if 'b' is present in the array ['a', 'b', 'c']. Returns true.

**Example 2:**
- **JavaScript:** `['a', 'b', 'c'].includes('d')`
- **DSL:** `'d' in ['a', 'b', 'c']`
- **Input:** _(none)_
- **Output:** `false`
- **Explanation:** Checks if 'd' is present in the array ['a', 'b', 'c']. Returns false.

---

## 5. Membership with Variables

**Example 1:**
- **JavaScript:** `x in [1,2,3,4,5,6,7,8,9,10] // x = 5`
- **DSL:** `x in [1..10]`
- **Input:** `{ "x": 5 }`
- **Output:** `true`
- **Explanation:** Checks if the variable x (5) is within the inclusive range from 1 to 10. Returns true.

**Example 2:**
- **JavaScript:** `x not in [1,2,3,4,5,6,7,8,9,10] // x = 11`
- **DSL:** `x not in [1..10]`
- **Input:** `{ "x": 11 }`
- **Output:** `true`
- **Explanation:** Checks if the variable x (11) is outside the inclusive range from 1 to 10. Returns true.

---

## 6. Membership in Quantifiers and Filters

**Example 1:**
- **JavaScript:** `['a', 'b', 'c'].every(x => ['a', 'b', 'c', 'd'].includes(x))`
- **DSL:** `all(['a', 'b', 'c'], # in ['a', 'b', 'c', 'd'])`
- **Input:** _(none)_
- **Output:** `true`
- **Explanation:** Checks if all elements in ['a', 'b', 'c'] are present in ['a', 'b', 'c', 'd']. Returns true.

**Example 2:**
- **JavaScript:** `['a', 'b', 'c'].filter(x => ['a', 'c'].includes(x))`
- **DSL:** `filter(['a', 'b', 'c', 'd'], # in ['a', 'c'])`
- **Input:** _(none)_
- **Output:** `['a', 'c']`
- **Explanation:** Filters the array ['a', 'b', 'c', 'd'] to include only elements that are also in ['a', 'c'].

---

## 7. Range Types: Inclusive and Exclusive

**Example 1:**
- **JavaScript:** `5 in [1,2,3,4,5,6,7,8,9,10]`
- **DSL:** `5 in [1..10]`
- **Input:** _(none)_
- **Output:** `true`
- **Explanation:** Inclusive range: both 1 and 10 are included.

**Example 2:**
- **JavaScript:** `5 in [1,2,3,4,5,6,7,8,9]`
- **DSL:** `5 in [1..10)`
- **Input:** _(none)_
- **Output:** `true`
- **Explanation:** Half-open range: 1 is included, 10 is excluded.

**Example 3:**
- **JavaScript:** `5 in (1,2,3,4,5,6,7,8,9,10)`
- **DSL:** `5 in (1..10)`
- **Input:** _(none)_
- **Output:** `true`
- **Explanation:** Open range: both 1 and 10 are excluded.

---

## 8. Syntax Restrictions

- Use only `in` and `not in` for membership checks.
- Membership is valid for arrays, ranges, and collections as defined in the DSL.
- No support for `includes`, `has`, or other non-DSL membership operators.
- Parentheses and brackets must be used as shown in the examples for ranges and arrays.
- Do not wrap expressions in quotes.
- Only use operators, methods, and functions defined in this rule.

---

## 9. Summary Table

| Feature/Operator         | Allowed | Example (DSL)                          |
|-------------------------|---------|----------------------------------------|
| Membership in array     | Yes     | `3 in [1, 2, 3]`                       |
| Membership in range     | Yes     | `5 in [1..10]`                         |
| Not in array/range      | Yes     | `5 not in [1..10)`                     |
| Membership with dates   | Yes     | `d('2023-10-15') in [d('2023-10-01')..d('2023-10-31')]` |
| Membership with strings | Yes     | `'a' in ['a', 'b', 'c']`               |
| Non-DSL membership ops  | No      | `includes`, `has`, etc.                |

---
